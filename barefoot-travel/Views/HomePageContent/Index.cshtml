@{
    ViewData["Title"] = "Homepage Content Management";
    Layout = "~/Views/Admin/_Layout.cshtml";
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="d-md-flex align-items-center mb-4">
                    <div>
                        <h4 class="card-title">Homepage Content Management</h4>
                        <p class="card-subtitle">Manage how categories and tours are displayed on the homepage</p>
                    </div>
                    <div class="ms-auto mt-3 mt-md-0">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addSectionModal">
                            <i class="ti ti-plus me-2"></i>Configure New Section
                        </button>
                    </div>
                </div>

                <!-- Active Sections List -->
                <div class="alert alert-info mb-4">
                    <i class="ti ti-info-circle me-2"></i>
                    <strong>How it works:</strong> Configure which categories appear on the homepage. Each section can display tours from selected categories with custom titles and layout styles.
                </div>

                <!-- Configured Sections -->
                <div id="homepageSectionsList" class="row">
                    <!-- Sections will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal: Add/Edit Homepage Section -->
<div class="modal fade" id="addSectionModal" tabindex="-1" aria-labelledby="addSectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addSectionModalLabel">Configure Homepage Section</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="sectionForm">
                    <input type="hidden" id="sectionId">
                    <input type="hidden" id="categoryId">
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Section Name (Identifier) <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="sectionName" placeholder="e.g., adventure-tours, top-packages" required>
                            <small class="text-muted">Unique identifier for this section (no spaces, lowercase)</small>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Section Title (Displayed on Homepage) <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="sectionTitle" placeholder="e.g., Ways to Travel, Top Packages" required>
                            <small class="text-muted">This title will be shown as the section heading on the homepage</small>
                        </div>
                    </div>

                    <!-- Tour Selection Mode Toggle -->
                    <div class="row">
                        <div class="col-12 mb-3">
                            <label class="form-label">Tour Selection Mode</label>
                            <div class="btn-group w-100" role="group">
                                <input type="radio" class="btn-check" name="tourSelectionMode" id="autoMode" value="auto" checked>
                                <label class="btn btn-outline-primary" for="autoMode">
                                    <i class="ti ti-settings me-2"></i>Auto (Use All Tours)
                                </label>
                                <input type="radio" class="btn-check" name="tourSelectionMode" id="manualMode" value="manual">
                                <label class="btn btn-outline-primary" for="manualMode">
                                    <i class="ti ti-hand-finger me-2"></i>Manual (Select Tours)
                                </label>
                            </div>
                            <small class="text-muted">Choose whether to use all tours from category (Auto) or select specific tours (Manual)</small>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3" id="categorySelectionContainer">
                            <!-- Auto Mode: Single Category Selection -->
                            <div id="autoModeCategory">
                                <label class="form-label">Select Category <span class="text-danger">*</span></label>
                                <input type="hidden" id="categorySelect" required>
                                <div id="categoryTree" class="border rounded p-3 bg-light" style="max-height: 300px; overflow-y: auto; overflow-x: hidden;">
                                    <div class="text-center text-muted">Loading categories...</div>
                                </div>
                                <small class="text-muted">Select category for auto tour display</small>
                            </div>
                            
                            <!-- Manual Mode: Multiple Category Selection -->
                            <div id="manualModeCategories" style="display: none;">
                                <label class="form-label">Select Categories (Multiple) <span class="text-danger">*</span></label>
                                <div id="categoryTreeMulti" class="border rounded p-3 bg-light" style="max-height: 300px; overflow-y: auto; overflow-x: hidden;">
                                    <div class="text-center text-muted">Loading categories...</div>
                                </div>
                                <small class="text-muted">Select one or more categories to choose tours from (including parent categories)</small>
                                <div id="selectedCategoriesList" class="mt-2">
                                    <!-- Selected categories will show here -->
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3 position-relative">
                            <label class="form-label">Layout Style</label>
                            <select class="form-select" id="layoutStyle">
                                <option value="grid">Grid (4 columns)</option>
                                <option value="grid-3">Grid (3 columns)</option>
                                <option value="grid-2">Grid (2 columns)</option>
                                <option value="spotlight">Spotlight (Large cards)</option>
                                <option value="carousel">Carousel</option>
                            </select>
                            <!-- Layout Demo Tooltip -->
                            <div id="layoutDemo" class="layout-demo-tooltip" style="display: none; position: absolute; top: 100%; right: 0; margin-top: 5px; z-index: 1050; background: white; border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); padding: 15px; min-width: 350px; max-width: 500px;">
                                <div class="d-flex align-items-center justify-content-between mb-2">
                                    <h6 class="mb-0" id="demoTitle">Layout Preview</h6>
                                    <button type="button" class="btn-close" onclick="$('#layoutDemo').hide();"></button>
                                </div>
                                <div id="demoContent" style="font-size: 12px;">
                                    <!-- Demo content will be inserted here -->
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Manual Tour Selection Panel -->
                    <div id="manualTourSelectionPanel" style="display: none;">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Available Tours in Category</label>
                                <div id="availableToursContainer" class="border rounded p-3 bg-light" style="max-height: 400px; overflow-y: auto;">
                                    <div class="text-center text-muted">Select a category first</div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Selected Tours <span class="badge bg-success" id="selectedToursCount">0</span></label>
                                <div id="selectedToursContainer" class="border rounded p-2 bg-light" style="min-height: 200px; max-height: 400px; overflow-y: auto;">
                                    <div class="text-center text-muted p-4">
                                        <i class="ti ti-inbox fs-1"></i>
                                        <p class="mt-2 mb-0">No tours selected</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Max Items to Display</label>
                            <input type="number" class="form-control" id="maxItems" value="8" min="1" max="20">
                            <small class="text-muted">Maximum number of tours to show</small>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Display Order</label>
                            <input type="number" class="form-control" id="displayOrder" value="0">
                            <small class="text-muted">Order on homepage (0 = first)</small>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" id="isActive">
                                <option value="true">Active</option>
                                <option value="false">Inactive</option>
                            </select>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Section Badge Text (Optional)</label>
                        <input type="text" class="form-control" id="badgeText" placeholder="e.g., FEATURED, NEW, BEST SELLER">
                        <small class="text-muted">This text will appear as a badge on the section</small>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Custom CSS Class (Optional)</label>
                        <input type="text" class="form-control" id="customClass" placeholder="e.g., special-section, dark-theme">
                        <small class="text-muted">Add custom styling to this section</small>
                    </div>

                    <!-- Spotlight Image (only for Spotlight layout) -->
                    <div class="mb-3" id="spotlightImageContainer" style="display: none;">
                        <label class="form-label">Spotlight Background Image <span class="text-danger">*</span></label>
                        <div class="row">
                            <div class="col-md-6">
                                <div id="spotlightImagePreview" class="mb-2" style="display: none;">
                                    <img id="spotlightImagePreviewImg" src="" alt="Preview" class="img-thumbnail" style="max-height: 200px;">
                                </div>
                                <button type="button" class="btn btn-sm btn-outline-primary" onclick="openSpotlightImageGallery()">
                                    <i class="ti ti-photo me-1"></i>Select Image
                                </button>
                                <input type="hidden" id="spotlightImageUrl">
                            </div>
                        </div>
                        <small class="text-muted d-block mt-2">This image will be used as the background for the spotlight card (Required for Spotlight layout)</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveSectionBtn">Save Section</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal: Preview Section -->
<div class="modal fade" id="previewSectionModal" tabindex="-1" aria-labelledby="previewSectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="previewSectionModalLabel">Section Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="sectionPreview">
                    <!-- Preview will be shown here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal: Delete Confirmation -->
<div class="modal fade" id="deleteSectionModal" tabindex="-1" aria-labelledby="deleteSectionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteSectionModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="d-flex align-items-center mb-3">
                    <div class="me-3">
                        <i class="ti ti-alert-circle fs-1 text-danger"></i>
                    </div>
                    <div>
                        <h6 class="mb-1">Are you sure you want to remove this section?</h6>
                        <p class="text-muted mb-0" id="deleteSectionInfo">This action cannot be undone.</p>
                    </div>
                </div>
                <div class="alert alert-warning">
                    <i class="ti ti-info-circle me-2"></i>
                    <strong>Note:</strong> This will only remove the section from the homepage. Tours and categories will not be affected.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="ti ti-trash me-2"></i>Delete Section
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal: Reorder Sections -->
<div class="modal fade" id="reorderSectionsModal" tabindex="-1" aria-labelledby="reorderSectionsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reorderSectionsModalLabel">Reorder Homepage Sections</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info mb-3">
                    <i class="ti ti-info-circle me-2"></i>
                    Drag and drop sections to reorder them, or use the arrow buttons.
                </div>
                <div id="reorderSectionsList" class="list-group">
                    <!-- Sections will be loaded here for reordering -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveReorderBtn">
                    <i class="ti ti-check me-2"></i>Save Order
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Ways to Travel Section -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="d-md-flex align-items-center mb-4">
                    <div>
                        <h4 class="card-title">Ways to Travel</h4>
                        <p class="card-subtitle">Configure travel style categories displayed on the homepage</p>
                    </div>
                    <div class="ms-auto mt-3 mt-md-0">
                        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#waysToTravelModal">
                            <i class="ti ti-plus me-2"></i>Add Category to Ways to Travel
                        </button>
                    </div>
                </div>

                <!-- Alert Info -->
                <div class="alert alert-warning mb-4">
                    <i class="ti ti-alert-circle me-2"></i>
                    <strong>Requirements:</strong> Maximum 5 categories allowed. Each category must have at least 1 image (max 2 images). Categories are displayed in a grid format on the homepage.
                </div>

                <!-- Ways to Travel Categories List -->
                <div id="waysToTravelList" class="row">
                    <!-- Categories will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal: Ways to Travel Configuration -->
<div class="modal fade" id="waysToTravelModal" tabindex="-1" aria-labelledby="waysToTravelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="waysToTravelModalLabel">Configure Ways to Travel Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="waysToTravelForm">
                    <input type="hidden" id="wtCategoryId">
                    <input type="hidden" id="wtEditId">
                    
                                         <div class="row">
                         <div class="col-md-6 mb-3">
                             <label class="form-label">Select Category <span class="text-danger">*</span></label>
                             <input type="hidden" id="wtCategorySelect" required>
                             <div id="wtCategoryTree" class="border rounded p-3 bg-light" style="max-height: 300px; overflow-y: auto; overflow-x: hidden;">
                                 <div class="text-center text-muted">Loading categories...</div>
                             </div>
                             <small class="text-muted">Select a category to display in Ways to Travel section (Only TOURS type)</small>
                         </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Display Order</label>
                            <input type="number" class="form-control" id="wtDisplayOrder" value="0" min="0">
                            <small class="text-muted">Order on homepage (0 = first)</small>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" id="wtIsActive">
                                <option value="true">Active</option>
                                <option value="false">Inactive</option>
                            </select>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-12 mb-3">
                            <label class="form-label">Images <span class="text-danger">*</span></label>
                            <small class="text-muted d-block mb-2">Select up to 2 images for this category. First image is required.</small>
                            
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label small">Image 1 (Required)</label>
                                    <div class="border rounded p-2">
                                        <div id="wtImage1Preview" class="mb-2" style="display:none;">
                                            <img id="wtImage1PreviewImg" src="" alt="Preview" class="img-thumbnail" style="max-height: 200px;">
                                        </div>
                                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="openImageGallery('wtImage1Url', 'wtImage1Preview', 'wtImage1PreviewImg')">
                                            <i class="ti ti-photo me-1"></i>Select Image 1
                                        </button>
                                        <input type="hidden" id="wtImage1Url" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label small">Image 2 (Optional)</label>
                                    <div class="border rounded p-2">
                                        <div id="wtImage2Preview" class="mb-2" style="display:none;">
                                            <img id="wtImage2PreviewImg" src="" alt="Preview" class="img-thumbnail" style="max-height: 200px;">
                                        </div>
                                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="openImageGallery('wtImage2Url', 'wtImage2Preview', 'wtImage2PreviewImg')">
                                            <i class="ti ti-photo me-1"></i>Select Image 2
                                        </button>
                                        <input type="hidden" id="wtImage2Url">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveWaysToTravelBtn">Save Configuration</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal: Image Gallery -->
<div class="modal fade" id="imageGalleryModal" tabindex="-1" aria-labelledby="imageGalleryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageGalleryModalLabel">Select Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Tabs for Uploaded and New Upload -->
                <ul class="nav nav-tabs mb-3" id="imageTab" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="uploaded-tab" data-bs-toggle="tab" data-bs-target="#uploaded" type="button" role="tab">Uploaded Images</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="upload-tab" data-bs-toggle="tab" data-bs-target="#upload" type="button" role="tab">Upload New</button>
                    </li>
                </ul>
                
                <div class="tab-content" id="imageTabContent">
                    <!-- Uploaded Images -->
                    <div class="tab-pane fade show active" id="uploaded" role="tabpanel">
                        <div class="row g-2" id="uploadedImagesGrid">
                            <!-- Images will be loaded here -->
                        </div>
                    </div>
                    
                    <!-- Upload New -->
                    <div class="tab-pane fade" id="upload" role="tabpanel">
                        <div class="mb-3">
                            <label class="form-label">Upload New Image</label>
                            <input type="file" class="form-control" id="newImageUpload" accept="image/*">
                            <small class="text-muted">Allowed: JPG, PNG, GIF, WebP (Max: 10MB)</small>
                        </div>
                        <div id="newImagePreview" style="display:none;">
                            <img id="newImagePreviewImg" src="" alt="Preview" class="img-thumbnail" style="max-height: 300px;">
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="selectImageBtn" disabled>Select This Image</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .image-select-card {
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .image-select-card:hover {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
            transform: translateY(-2px);
        }
        
        /* Category Tree Styles */
        #categoryTree {
            background-color: #f8f9fa;
        }
        .category-tree-item {
            margin: 2px 0;
        }
        .category-item-row {
            transition: background-color 0.2s ease;
        }
        .category-item-row:hover {
            background-color: #e9ecef !important;
        }
        .category-item-row.bg-primary {
            background-color: #0d6efd !important;
        }
        .expand-icon {
            transition: transform 0.2s ease;
        }
        .expand-icon:hover {
            transform: scale(1.2);
        }
    </style>
    <script>
        let allSections = []; // Store all sections globally
        // Ways to Travel Variables
        let allWaysToTravelCategories = [];
        let currentImageGalleryTarget = null;
        let currentImagePreviewDiv = null;
        let currentImagePreviewImg = null;
        
        // Manual Tour Selection Variables
        let availableTours = []; // All tours from all selected categories
        let selectedTours = []; // Array of {id, title, pricePerPerson, duration, bannerImageUrl, images}
        let selectedCategoryIds = []; // Array of selected category IDs for manual mode

        $(document).ready(function() {
            loadCategories();
            loadHomepageSections();
            loadWaysToTravelCategories();
            loadCategoriesForWaysToTravel();
            
            // Layout Style Hover Demo
            initLayoutDemo();
            
            // Toggle spotlight image field based on layout style
            $('#layoutStyle').on('change', function() {
                const layoutStyle = $(this).val();
                if (layoutStyle === 'spotlight') {
                    $('#spotlightImageContainer').slideDown(300);
                } else {
                    $('#spotlightImageContainer').slideUp(300);
                }
            });
            
            // Initial check on page load
            if ($('#layoutStyle').val() === 'spotlight') {
                $('#spotlightImageContainer').show();
            }
            
            // Toggle manual tour selection panel and category selection mode based on tour selection mode
            $('input[name="tourSelectionMode"]').on('change', function() {
                const mode = $(this).val();
                
                if (mode === 'manual') {
                    // Show manual mode UI
                    $('#manualTourSelectionPanel').slideDown(300);
                    $('#autoModeCategory').hide();
                    $('#manualModeCategories').show();
                    
                    // Load categories for multi-select
                    loadCategoriesForMultiSelect();
                    
                    // Clear and reload if categories selected
                    if (selectedCategoryIds.length > 0) {
                        loadToursFromMultipleCategories(selectedCategoryIds);
                    }
                } else {
                    // Show auto mode UI
                    $('#manualTourSelectionPanel').slideUp(300);
                    $('#autoModeCategory').show();
                    $('#manualModeCategories').hide();
                    
                    // Clear manual mode selections
                    selectedTours = [];
                    selectedCategoryIds = [];
                    renderSelectedTours();
                    renderSelectedCategories();
                }
            });
        });
        
        // Initialize Layout Demo
        function initLayoutDemo() {
            const $layoutStyle = $('#layoutStyle');
            const $demo = $('#layoutDemo');
            let hoverTimeout;
            
            // Show demo on hover
            $layoutStyle.on('mouseenter', function() {
                clearTimeout(hoverTimeout);
                const selectedValue = $(this).val();
                showLayoutDemo(selectedValue);
            });
            
            // Hide demo on mouse leave
            $layoutStyle.on('mouseleave', function() {
                hoverTimeout = setTimeout(function() {
                    $demo.fadeOut(200);
                }, 300);
            });
            
            // Keep demo visible when hovering over it
            $demo.on('mouseenter', function() {
                clearTimeout(hoverTimeout);
                $(this).show();
            });
            
            $demo.on('mouseleave', function() {
                $(this).fadeOut(200);
            });
        }
        
        // Show layout demo
        function showLayoutDemo(layoutType) {
            const $demo = $('#layoutDemo');
            const $title = $('#demoTitle');
            const $content = $('#demoContent');
            
            let title = '';
            let description = '';
            let demoHtml = '';
            
            switch(layoutType) {
                case 'grid':
                    title = 'Grid (4 columns)';
                    description = 'Displays tours in a responsive 4-column grid layout with horizontal scrolling.';
                    demoHtml = `
                        <div class="border rounded p-2" style="background: #f8f9fa;">
                            <div class="d-flex gap-2 mb-2">
                                <div class="border rounded p-1 bg-white text-center" style="flex: 1; min-height: 40px;">Card 1</div>
                                <div class="border rounded p-1 bg-white text-center" style="flex: 1; min-height: 40px;">Card 2</div>
                                <div class="border rounded p-1 bg-white text-center" style="flex: 1; min-height: 40px;">Card 3</div>
                                <div class="border rounded p-1 bg-white text-center" style="flex: 1; min-height: 40px;">Card 4</div>
                            </div>
                            <div class="text-center text-muted small">← Swipe to see more →</div>
                        </div>
                    `;
                    break;
                case 'grid-3':
                    title = 'Grid (3 columns)';
                    description = 'Displays tours in a 3-column grid with a featured content panel on the right.';
                    demoHtml = `
                        <div class="border rounded p-2" style="background: #f8f9fa;">
                            <div class="d-flex gap-2">
                                <div style="flex: 2;">
                                    <div class="d-flex gap-2 mb-2">
                                        <div class="border rounded p-1 bg-white text-center" style="flex: 1; min-height: 50px;">1</div>
                                        <div class="border rounded p-1 bg-white text-center" style="flex: 1; min-height: 50px;">2</div>
                                        <div class="border rounded p-1 bg-white text-center" style="flex: 1; min-height: 50px;">3</div>
                                    </div>
                                </div>
                                <div style="flex: 1; background: #0d6efd; border-radius: 4px; color: white; padding: 8px; font-size: 10px;">
                                    <strong>Featured</strong><br>
                                    Content Panel
                                </div>
                            </div>
                        </div>
                    `;
                    break;
                case 'grid-2':
                    title = 'Grid (2 columns)';
                    description = 'Displays tours in a simple 2-column grid layout.';
                    demoHtml = `
                        <div class="border rounded p-2" style="background: #f8f9fa;">
                            <div class="d-flex gap-2 mb-2">
                                <div class="border rounded p-1 bg-white text-center" style="flex: 1; min-height: 60px;">Card 1</div>
                                <div class="border rounded p-1 bg-white text-center" style="flex: 1; min-height: 60px;">Card 2</div>
                            </div>
                            <div class="d-flex gap-2">
                                <div class="border rounded p-1 bg-white text-center" style="flex: 1; min-height: 60px;">Card 3</div>
                                <div class="border rounded p-1 bg-white text-center" style="flex: 1; min-height: 60px;">Card 4</div>
                            </div>
                        </div>
                    `;
                    break;
                case 'spotlight':
                    title = 'Spotlight (Large cards)';
                    description = 'Displays large promotional cards with content panel on left/right, alternating layout.';
                    demoHtml = `
                        <div class="border rounded p-2" style="background: #f8f9fa;">
                            <div class="d-flex gap-2 mb-2">
                                <div style="flex: 1; background: #0d6efd; border-radius: 4px; color: white; padding: 8px; font-size: 10px;">
                                    <strong>FEATURED</strong><br>
                                    <small>Promo Content Panel</small>
                                </div>
                                <div style="flex: 2;">
                                    <div class="border rounded p-1 bg-white" style="min-height: 50px;">Large Tour Card</div>
                                </div>
                            </div>
                            <div class="text-center text-muted small">Next section: Content on right</div>
                        </div>
                    `;
                    break;
                case 'carousel':
                    title = 'Carousel';
                    description = 'Displays tours in a carousel/slider with navigation arrows.';
                    demoHtml = `
                        <div class="border rounded p-2" style="background: #f8f9fa;">
                            <div class="position-relative">
                                <div class="d-flex gap-2 overflow-hidden" style="max-width: 100%;">
                                    <div class="border rounded p-1 bg-white text-center" style="flex: 0 0 100%; min-height: 50px;">Slide 1</div>
                                </div>
                                <button class="btn btn-sm btn-primary position-absolute" style="left: -10px; top: 50%; transform: translateY(-50%); border-radius: 50%; width: 24px; height: 24px; padding: 0; font-size: 10px;">‹</button>
                                <button class="btn btn-sm btn-primary position-absolute" style="right: -10px; top: 50%; transform: translateY(-50%); border-radius: 50%; width: 24px; height: 24px; padding: 0; font-size: 10px;">›</button>
                            </div>
                            <div class="text-center text-muted small mt-2">← Click arrows to navigate →</div>
                        </div>
                    `;
                    break;
            }
            
            $title.text(title);
            $content.html(`<p class="small text-muted mb-2">${description}</p>${demoHtml}`);
            $demo.fadeIn(200);
        }

        // Load all categories for selection (with tree structure)
        function loadCategories() {
            $.ajax({
                url: '/api/Category/tree',
                type: 'GET',
                success: function(response) {
                    if (response.success && response.data) {
                        const container = $('#categoryTree');
                        container.empty();
                        
                        if (response.data.length === 0) {
                            container.append('<div class="text-muted text-center">No categories available</div>');
                            return;
                        }
                        
                        // Recursively build category tree
                        function buildCategoryTree(categories, container, level = 0) {
                            categories.forEach(function(category) {
                                // Only show categories with type='TOURS' and totalTours > 0
                                if (category.type === 'TOURS' && category.totalTours > 0) {
                                    // Check if children has any valid categories
                                    const validChildren = category.children ? category.children.filter(child => child.type === 'TOURS' && child.totalTours > 0) : [];
                                    const hasChildren = validChildren.length > 0;
                                    
                                    const item = $(`
                                        <div class="category-tree-item" data-category-id="${category.id}" style="padding-left: ${level * 20}px;">
                                            <div class="d-flex align-items-center mb-1 category-item-row" style="cursor: pointer; padding: 5px; border-radius: 4px;" 
                                                 ${hasChildren ? '' : 'onclick="selectCategory(' + category.id + ', \'' + category.categoryName.replace(/'/g, "\\'") + '\')"'}
                                                 onmouseover="this.style.backgroundColor='#f0f0f0'" 
                                                 onmouseout="this.style.backgroundColor='transparent'">
                                                ${hasChildren ? '<i class="ti ti-plus me-2 expand-icon" style="width: 16px; text-align: center; cursor: pointer;" onclick="toggleCategory(this, event)"></i>' : '<span class="me-2" style="width: 16px;"></span>'}
                                                <span class="category-name flex-grow-1">${category.categoryName}</span>
                                                <span class="badge bg-info ms-1">${category.totalTours} tours</span>
                                            </div>
                                            <div class="category-children" style="display: none;"></div>
                                        </div>
                                    `);
                                    
                                    container.append(item);
                                    
                                    // If has children, populate them
                                    if (hasChildren) {
                                        buildCategoryTree(validChildren, item.find('.category-children'), level + 1);
                                    }
                                }
                            });
                        }
                        
                        buildCategoryTree(response.data, container);
                    }
                },
                error: function() {
                    $('#categoryTree').html('<div class="text-danger text-center">Error loading categories</div>');
                }
            });
        }

        // Toggle category expansion
        window.toggleCategory = function(iconElement, event) {
            event.stopPropagation();
            const $icon = $(iconElement);
            const $children = $icon.closest('.category-tree-item').find('.category-children');
            
            if ($children.is(':visible')) {
                $children.slideUp(200);
                $icon.removeClass('ti-minus').addClass('ti-plus');
            } else {
                $children.slideDown(200);
                $icon.removeClass('ti-plus').addClass('ti-minus');
            }
        };

        // Select category (for Auto mode - single selection)
        window.selectCategory = function(categoryId, categoryName) {
            $('#categorySelect').val(categoryId);
            
            // Visual feedback - highlight selected
            $('#categoryTree .category-item-row').removeClass('bg-primary text-white');
            $(`#categoryTree .category-tree-item[data-category-id="${categoryId}"] .category-item-row`).addClass('bg-primary text-white');
            
            showToast(`Selected category: ${categoryName}`, 'success');
        };
        
        // Load categories for multi-select (Manual mode)
        function loadCategoriesForMultiSelect() {
            $.ajax({
                url: '/api/Category/tree',
                type: 'GET',
                success: function(response) {
                    if (response.success && response.data) {
                        const container = $('#categoryTreeMulti');
                        container.empty();
                        
                        if (response.data.length === 0) {
                            container.append('<div class="text-muted text-center">No categories available</div>');
                            return;
                        }
                        
                        // Build category tree with checkboxes - ALLOW parent categories
                        function buildMultiSelectCategoryTree(categories, container, level = 0) {
                            categories.forEach(function(category) {
                                // Show ALL TOURS type categories (including parents)
                                if (category.type === 'TOURS') {
                                    const hasChildren = category.children && category.children.filter(c => c.type === 'TOURS').length > 0;
                                    const validChildren = hasChildren ? category.children.filter(c => c.type === 'TOURS') : [];
                                    
                                    const item = $(`
                                        <div class="category-tree-item" data-category-id="${category.id}" style="padding-left: ${level * 20}px;">
                                            <div class="d-flex align-items-center mb-1 category-item-row" style="padding: 5px; border-radius: 4px;">
                                                ${hasChildren ? '<i class="ti ti-plus me-2 expand-icon" style="width: 16px; text-align: center; cursor: pointer;" onclick="toggleCategoryMulti(this, event)"></i>' : '<span class="me-2" style="width: 16px;"></span>'}
                                                <input type="checkbox" class="form-check-input me-2" data-category-id="${category.id}" data-category-name="${category.categoryName.replace(/"/g, '&quot;')}" onchange="toggleCategorySelection(${category.id}, '${category.categoryName.replace(/'/g, "\\'")}', this.checked)">
                                                <span class="category-name flex-grow-1">${category.categoryName}</span>
                                                <span class="badge bg-info ms-1">${category.totalTours} tours</span>
                                            </div>
                                            <div class="category-children" style="display: none;"></div>
                                        </div>
                                    `);
                                    
                                    container.append(item);
                                    
                                    // If has children, populate them
                                    if (hasChildren) {
                                        buildMultiSelectCategoryTree(validChildren, item.find('.category-children'), level + 1);
                                    }
                                }
                            });
                        }
                        
                        buildMultiSelectCategoryTree(response.data, container);
                    }
                },
                error: function() {
                    $('#categoryTreeMulti').html('<div class="text-danger text-center">Error loading categories</div>');
                }
            });
        }
        
        // Toggle category expansion for multi-select
        window.toggleCategoryMulti = function(iconElement, event) {
            event.stopPropagation();
            const $icon = $(iconElement);
            const $children = $icon.closest('.category-tree-item').find('> .category-children');
            
            if ($children.is(':visible')) {
                $children.slideUp(200);
                $icon.removeClass('ti-minus').addClass('ti-plus');
            } else {
                $children.slideDown(200);
                $icon.removeClass('ti-plus').addClass('ti-minus');
            }
        };
        
        // Toggle category selection for manual mode
        window.toggleCategorySelection = function(categoryId, categoryName, isChecked) {
            if (isChecked) {
                // Add to selected categories
                if (!selectedCategoryIds.includes(categoryId)) {
                    selectedCategoryIds.push(categoryId);
                }
            } else {
                // Remove from selected categories
                selectedCategoryIds = selectedCategoryIds.filter(id => id !== categoryId);
            }
            
            // Update UI
            renderSelectedCategories();
            
            // Reload tours from all selected categories
            if (selectedCategoryIds.length > 0) {
                loadToursFromMultipleCategories(selectedCategoryIds);
            } else {
                availableTours = [];
                renderAvailableTours();
            }
        };
        
        // Render selected categories
        function renderSelectedCategories() {
            const container = $('#selectedCategoriesList');
            container.empty();
            
            if (selectedCategoryIds.length === 0) {
                return;
            }
            
            container.append('<div class="mt-2"><strong>Selected Categories:</strong></div>');
            const badges = $('<div class="d-flex flex-wrap gap-1 mt-1"></div>');
            
            selectedCategoryIds.forEach(function(catId) {
                const checkbox = $(`#categoryTreeMulti input[data-category-id="${catId}"]`);
                const categoryName = checkbox.data('category-name');
                badges.append(`<span class="badge bg-primary">${categoryName}</span>`);
            });
            
            container.append(badges);
        }
        
        // Load tours from multiple categories
        function loadToursFromMultipleCategories(categoryIds) {
            const container = $('#availableToursContainer');
            container.html('<div class="text-center text-muted p-4"><div class="spinner-border" role="status"></div><p class="mt-2">Loading tours...</p></div>');
            
            // Fetch tours from all categories
            const promises = categoryIds.map(catId => 
                $.ajax({
                    url: `/api/Tour/by-category/${catId}`,
                    type: 'GET',
                    data: { maxItems: 100 }
                })
            );
            
            Promise.all(promises).then(responses => {
                const allTours = [];
                responses.forEach(response => {
                    if (response.success && response.data) {
                        allTours.push(...response.data);
                    }
                });
                
                // Remove duplicates by ID
                const uniqueToursMap = new Map();
                allTours.forEach(tour => {
                    if (!uniqueToursMap.has(tour.id)) {
                        uniqueToursMap.set(tour.id, tour);
                    }
                });
                
                availableTours = Array.from(uniqueToursMap.values());
                renderAvailableTours();
                
                if (availableTours.length === 0) {
                    container.html('<div class="text-center text-muted">No tours available in selected categories</div>');
                }
            }).catch(error => {
                container.html('<div class="text-center text-danger">Error loading tours</div>');
            });
        }

        // Load available tours for category
        function loadAvailableTours(categoryId) {
            const container = $('#availableToursContainer');
            container.html('<div class="text-center text-muted p-4"><div class="spinner-border" role="status"></div><p class="mt-2">Loading tours...</p></div>');
            
            $.ajax({
                url: `/api/Tour/by-category/${categoryId}`,
                type: 'GET',
                data: { maxItems: 100 }, // Get all tours
                success: function(response) {
                    if (response.success && response.data) {
                        availableTours = response.data;
                        renderAvailableTours();
                    } else {
                        container.html('<div class="text-center text-muted">No tours available in this category</div>');
                    }
                },
                error: function() {
                    container.html('<div class="text-center text-danger">Error loading tours</div>');
                }
            });
        }

        // Render available tours
        function renderAvailableTours() {
            const container = $('#availableToursContainer');
            container.empty();
            
            if (availableTours.length === 0) {
                container.html('<div class="text-center text-muted">No tours available</div>');
                return;
            }
            
            availableTours.forEach(function(tour) {
                // Check if tour is already selected
                const isSelected = selectedTours.some(st => st.id === tour.id);
                const imageUrl = tour.bannerImageUrl || (tour.images && tour.images.length > 0 ? tour.images[0] : '/images/placeholder.jpg');
                
                const tourCard = $(`
                    <div class="card mb-2 ${isSelected ? 'border-success' : ''}" style="cursor: ${isSelected ? 'not-allowed' : 'pointer'}; opacity: ${isSelected ? '0.5' : '1'};" ${isSelected ? '' : `onclick="selectTour(${tour.id})"`}>
                        <div class="card-body p-2">
                            <div class="d-flex align-items-center">
                                <img src="${imageUrl}" alt="${tour.title}" style="width: 60px; height: 60px; object-fit: cover; border-radius: 4px; margin-right: 10px;">
                                <div class="flex-grow-1">
                                    <h6 class="mb-1" style="font-size: 0.9rem;">${tour.title}</h6>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="badge bg-primary">${tour.pricePerPerson ? formatCurrency(tour.pricePerPerson) : 'N/A'}</span>
                                        ${isSelected ? '<span class="badge bg-success"><i class="ti ti-check"></i> Selected</span>' : ''}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `);
                
                container.append(tourCard);
            });
        }

        // Select tour
        window.selectTour = function(tourId) {
            // Find tour in availableTours
            const tour = availableTours.find(t => t.id === tourId);
            if (!tour) return;
            
            // Check if already selected
            if (selectedTours.some(st => st.id === tourId)) return;
            
            // Add to selected
            selectedTours.push(tour);
            
            // Re-render
            renderAvailableTours();
            renderSelectedTours();
        };

        // Render selected tours
        function renderSelectedTours() {
            const container = $('#selectedToursContainer');
            const count = $('#selectedToursCount');
            count.text(selectedTours.length);
            
            container.empty();
            
            if (selectedTours.length === 0) {
                container.html(`
                    <div class="text-center text-muted p-4">
                        <i class="ti ti-inbox fs-1"></i>
                        <p class="mt-2 mb-0">No tours selected</p>
                    </div>
                `);
                return;
            }
            
            selectedTours.forEach(function(tour, index) {
                const imageUrl = tour.bannerImageUrl || (tour.images && tour.images.length > 0 ? tour.images[0] : '/images/placeholder.jpg');
                
                const selectedCard = $(`
                    <div class="card mb-2" data-tour-id="${tour.id}">
                        <div class="card-body p-2">
                            <div class="d-flex align-items-center">
                                <div class="me-2 text-muted">${index + 1}</div>
                                <img src="${imageUrl}" alt="${tour.title}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px; margin-right: 8px;">
                                <div class="flex-grow-1">
                                    <h6 class="mb-0" style="font-size: 0.85rem;">${tour.title}</h6>
                                    <small class="text-muted">${tour.pricePerPerson ? formatCurrency(tour.pricePerPerson) : 'N/A'}</small>
                                </div>
                                <button class="btn btn-sm btn-outline-danger" onclick="removeTour(${tour.id})" title="Remove">
                                    <i class="ti ti-x"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `);
                
                container.append(selectedCard);
            });
        }

        // Remove tour from selected
        window.removeTour = function(tourId) {
            selectedTours = selectedTours.filter(st => st.id !== tourId);
            renderAvailableTours();
            renderSelectedTours();
        };

                 // Load categories for Ways to Travel (with tree structure)
         function loadCategoriesForWaysToTravel() {
             $.ajax({
                 url: '/api/Category/tree',
                 type: 'GET',
                 success: function(response) {
                     if (response.success && response.data) {
                         const container = $('#wtCategoryTree');
                         container.empty();
                         
                         if (response.data.length === 0) {
                             container.append('<div class="text-muted text-center">No categories available</div>');
                             return;
                         }
                         
                         // Recursively build category tree
                         function buildWTCategoryTree(categories, container, level = 0) {
                             categories.forEach(function(category) {
                                 // Only show categories with type='TOURS' and totalTours > 0
                                 if (category.type === 'TOURS' && category.totalTours > 0) {
                                     // Check if children has any valid categories
                                     const validChildren = category.children ? category.children.filter(child => child.type === 'TOURS' && child.totalTours > 0) : [];
                                     const hasChildren = validChildren.length > 0;
                                     
                                     const item = $(`
                                         <div class="category-tree-item" data-category-id="${category.id}" style="padding-left: ${level * 20}px;">
                                             <div class="d-flex align-items-center mb-1 category-item-row" style="cursor: pointer; padding: 5px; border-radius: 4px;" 
                                                  ${hasChildren ? '' : 'onclick="selectWTCategory(' + category.id + ', \'' + category.categoryName.replace(/'/g, "\\'") + '\')"'}
                                                  onmouseover="this.style.backgroundColor='#f0f0f0'" 
                                                  onmouseout="this.style.backgroundColor='transparent'">
                                                 ${hasChildren ? '<i class="ti ti-plus me-2 expand-icon" style="width: 16px; text-align: center; cursor: pointer;" onclick="toggleCategory(this, event)"></i>' : '<span class="me-2" style="width: 16px;"></span>'}
                                                 <span class="category-name flex-grow-1">${category.categoryName}</span>
                                                 <span class="badge bg-info ms-1">${category.totalTours} tours</span>
                                             </div>
                                             <div class="category-children" style="display: none;"></div>
                                         </div>
                                     `);
                                     
                                     container.append(item);
                                     
                                     // If has children, populate them
                                     if (hasChildren) {
                                         buildWTCategoryTree(validChildren, item.find('.category-children'), level + 1);
                                     }
                                 }
                             });
                         }
                         
                         buildWTCategoryTree(response.data, container);
                     }
                 },
                 error: function() {
                     $('#wtCategoryTree').html('<div class="text-danger text-center">Error loading categories</div>');
                 }
             });
         }

         // Select category for Ways to Travel
         window.selectWTCategory = function(categoryId, categoryName) {
             $('#wtCategorySelect').val(categoryId);
             
             // Visual feedback - highlight selected
             $('#wtCategoryTree .category-item-row').removeClass('bg-primary text-white');
             $('#wtCategoryTree').find(`[data-category-id="${categoryId}"] .category-item-row`).addClass('bg-primary text-white');
             
             showToast(`Selected category: ${categoryName}`, 'success');
         };

        // Load Ways to Travel categories
        function loadWaysToTravelCategories() {
            $.ajax({
                url: '/api/HomePage/ways-to-travel',
                type: 'GET',
                success: function(response) {
                    if (response.success && response.data) {
                        allWaysToTravelCategories = response.data.categories;
                        displayWaysToTravelCategories(allWaysToTravelCategories);
                    }
                },
                error: function() {
                    showToast('Error loading Ways to Travel categories', 'danger');
                }
            });
        }

        // Display Ways to Travel categories
        function displayWaysToTravelCategories(categories) {
            const container = $('#waysToTravelList');
            container.empty();

            if (!categories || categories.length === 0) {
                container.append(`
                    <div class="col-12">
                        <div class="alert alert-info text-center">
                            <i class="ti ti-info-circle me-2"></i>
                            No categories configured yet. Click "Add Category to Ways to Travel" to get started.
                        </div>
                    </div>
                `);
                return;
            }

            // Sort by display order
            categories.sort((a, b) => a.displayOrder - b.displayOrder);

            categories.forEach(function(category) {
                const imagesHtml = category.imageUrl2 
                    ? `<div class="d-flex gap-2">
                          <img src="${category.imageUrl1}" alt="Image 1" class="img-thumbnail" style="max-width: 150px; max-height: 100px;">
                          <img src="${category.imageUrl2}" alt="Image 2" class="img-thumbnail" style="max-width: 150px; max-height: 100px;">
                        </div>`
                    : `<img src="${category.imageUrl1}" alt="Image 1" class="img-thumbnail" style="max-width: 150px; max-height: 100px;">`;

                container.append(`
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card border h-100">
                            <div class="card-header bg-light">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0">${category.categoryName}</h6>
                                    <span class="badge bg-success">Active</span>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-2">
                                    <small class="text-muted">Tours:</small>
                                    <div class="fw-bold">${category.totalTours} tours available</div>
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">Images:</small>
                                    ${imagesHtml}
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">Display Order:</small>
                                    <div>${category.displayOrder}</div>
                                </div>
                            </div>
                            <div class="card-footer bg-transparent border-0 pt-0">
                                <div class="btn-group w-100" role="group">
                                    <button class="btn btn-sm btn-outline-primary" onclick="editWaysToTravel(${category.categoryId})" title="Edit">
                                        <i class="ti ti-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-warning" onclick="moveWaysToTravelUp(${category.categoryId})" title="Move Up">
                                        <i class="ti ti-arrow-up"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-warning" onclick="moveWaysToTravelDown(${category.categoryId})" title="Move Down">
                                        <i class="ti ti-arrow-down"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteWaysToTravel(${category.categoryId})" title="Delete">
                                        <i class="ti ti-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `);
            });
        }

        // Open image gallery modal
        window.openImageGallery = function(targetInputId, previewDivId, previewImgId) {
            currentImageGalleryTarget = targetInputId;
            currentImagePreviewDiv = previewDivId;
            currentImagePreviewImg = previewImgId;
            
            $('#imageGalleryModal').modal('show');
            loadUploadedImages();
        };
        
        // Open spotlight image gallery
        window.openSpotlightImageGallery = function() {
            currentImageGalleryTarget = 'spotlightImageUrl';
            currentImagePreviewDiv = 'spotlightImagePreview';
            currentImagePreviewImg = 'spotlightImagePreviewImg';
            
            $('#imageGalleryModal').modal('show');
            loadUploadedImages();
        };

        // Load uploaded images
        function loadUploadedImages() {
            const grid = $('#uploadedImagesGrid');
            grid.empty();
            grid.append('<div class="col-12 text-center"><p>Loading images...</p></div>');

            $.ajax({
                url: '/api/FileUpload/images',
                type: 'GET',
                success: function(response) {
                    grid.empty();
                    
                    if (response.success && response.data && response.data.length > 0) {
                        response.data.forEach(function(image) {
                            grid.append(`
                                <div class="col-md-3 col-sm-4 col-6">
                                    <div class="card image-select-card" onclick="selectUploadedImage('${image.fileUrl}')">
                                        <img src="${image.fileUrl}" class="card-img-top" alt="Image" style="height: 150px; object-fit: cover;">
                                        <div class="card-body p-2 text-center">
                                            <small class="text-muted">${image.fileName}</small>
                                        </div>
                                    </div>
                                </div>
                            `);
                        });
                    } else {
                        grid.append('<div class="col-12 text-center"><p class="text-muted">No uploaded images found. Upload a new image using the "Upload New" tab.</p></div>');
                    }
                },
                error: function() {
                    grid.empty();
                    grid.append('<div class="col-12 text-center"><p class="text-danger">Error loading images</p></div>');
                }
            });
        }

        // Select uploaded image
        window.selectUploadedImage = function(imageUrl) {
            $('#' + currentImageGalleryTarget).val(imageUrl);
            $('#' + currentImagePreviewDiv).show();
            $('#' + currentImagePreviewImg).attr('src', imageUrl);
            $('#selectImageBtn').prop('disabled', false);
            $('#selectedImageUrl').val(imageUrl);
        };

        // Handle new image upload
        $('#newImageUpload').on('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                // Validate file type
                const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
                if (!validTypes.includes(file.type)) {
                    showToast('Invalid file type. Please select an image file.', 'danger');
                    return;
                }

                // Validate file size (10MB max)
                if (file.size > 10 * 1024 * 1024) {
                    showToast('File size too large. Maximum 10MB allowed.', 'danger');
                    return;
                }

                // Upload file immediately
                const formData = new FormData();
                formData.append('file', file);

                // Show loading
                $('#selectImageBtn').prop('disabled', true).text('Uploading...');

                $.ajax({
                    url: '/api/FileUpload/image',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        if (response.success && response.data) {
                            const imageUrl = response.data.fileUrl;
                            
                            // Store the uploaded image URL
                            $('#selectedImageUrl').val(imageUrl);
                            
                            // Preview image
                            $('#newImagePreview').show();
                            $('#newImagePreviewImg').attr('src', imageUrl);
                            $('#selectImageBtn').prop('disabled', false).text('Select This Image');
                            
                            showToast('Image uploaded successfully!', 'success');
                        } else {
                            showToast(response.message || 'Failed to upload image', 'danger');
                            $('#selectImageBtn').prop('disabled', true).text('Select This Image');
                        }
                    },
                    error: function(xhr) {
                        const errorMsg = xhr.responseJSON?.message || 'Failed to upload image';
                        showToast(errorMsg, 'danger');
                        $('#selectImageBtn').prop('disabled', true).text('Select This Image');
                    }
                });
            }
        });

        // Apply selected image
        $('#selectImageBtn').on('click', function() {
            const imageUrl = $('#selectedImageUrl').val() || $('#newImagePreviewImg').attr('src');
            if (imageUrl) {
                $('#' + currentImageGalleryTarget).val(imageUrl);
                $('#' + currentImagePreviewDiv).show();
                $('#' + currentImagePreviewImg).attr('src', imageUrl);
                $('#imageGalleryModal').modal('hide');
                
                // Reset
                $('#newImageUpload').val('');
                $('#newImagePreview').hide();
                $('#selectImageBtn').prop('disabled', true);
                $('#selectedImageUrl').val('');
            }
        });

        // Save Ways to Travel category
        $('#saveWaysToTravelBtn').on('click', function() {
            const form = $('#waysToTravelForm')[0];
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const categoryId = $('#wtCategorySelect').val();
            const imageUrl1 = $('#wtImage1Url').val();

            if (!imageUrl1) {
                showToast('Please select at least Image 1', 'danger');
                return;
            }

            const waysToTravelData = {
                imageUrl1: imageUrl1,
                imageUrl2: $('#wtImage2Url').val() || null,
                displayOrder: parseInt($('#wtDisplayOrder').val()),
                showInWaysToTravel: $('#wtIsActive').val() === 'true'
            };

            $.ajax({
                url: `/api/HomePage/category/${categoryId}/ways-to-travel`,
                type: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(waysToTravelData),
                success: function(response) {
                    if (response.success) {
                        showToast('Ways to Travel category configured successfully!', 'success');
                        $('#waysToTravelModal').modal('hide');
                        loadWaysToTravelCategories();
                    } else {
                        showToast(response.message || 'Failed to save configuration', 'danger');
                    }
                },
                error: function(xhr) {
                    const errorMsg = xhr.responseJSON?.message || 'Failed to save configuration';
                    showToast(errorMsg, 'danger');
                }
            });
        });

        // Edit Ways to Travel category
        window.editWaysToTravel = function(categoryId) {
            const category = allWaysToTravelCategories.find(c => c.categoryId === categoryId);
            if (!category) {
                showToast('Category not found', 'danger');
                return;
            }

            $('#wtCategoryId').val(category.categoryId);
            $('#wtCategorySelect').val(category.categoryId);
            $('#wtImage1Url').val(category.imageUrl1);
            $('#wtImage2Url').val(category.imageUrl2 || '');
            $('#wtDisplayOrder').val(category.displayOrder);
            $('#wtIsActive').val('true');

            // Show image previews
            if (category.imageUrl1) {
                $('#wtImage1Preview').show();
                $('#wtImage1PreviewImg').attr('src', category.imageUrl1);
            }
            if (category.imageUrl2) {
                $('#wtImage2Preview').show();
                $('#wtImage2PreviewImg').attr('src', category.imageUrl2);
            }

            // Highlight selected category in tree
            $('#wtCategoryTree .category-item-row').removeClass('bg-primary text-white');
            setTimeout(() => {
                $('#wtCategoryTree').find(`[data-category-id="${category.categoryId}"] .category-item-row`).addClass('bg-primary text-white');
            }, 100);

            $('#waysToTravelModal').modal('show');
        };

        // Delete Ways to Travel category
        window.deleteWaysToTravel = function(categoryId) {
            if (!confirm('Are you sure you want to remove this category from Ways to Travel?')) {
                return;
            }

            $.ajax({
                url: `/api/HomePage/category/${categoryId}/ways-to-travel`,
                type: 'DELETE',
                success: function(response) {
                    if (response.success) {
                        showToast('Category removed from Ways to Travel', 'success');
                        loadWaysToTravelCategories();
                    } else {
                        showToast(response.message || 'Failed to remove category', 'danger');
                    }
                },
                error: function(xhr) {
                    const errorMsg = xhr.responseJSON?.message || 'Failed to remove category';
                    showToast(errorMsg, 'danger');
                }
            });
        };

        // Move Ways to Travel category up
        window.moveWaysToTravelUp = function(categoryId) {
            const currentCategory = allWaysToTravelCategories.find(c => c.categoryId === categoryId);
            if (!currentCategory) {
                showToast('Category not found', 'danger');
                return;
            }

            const currentOrder = currentCategory.displayOrder;
            const prevCategory = allWaysToTravelCategories.find(c => c.displayOrder === currentOrder - 1);

            if (!prevCategory) {
                showToast('Cannot move up further', 'warning');
                return;
            }

            // Swap orders - send both in one request
            const reorderData = [
                { categoryId: categoryId, displayOrder: currentOrder - 1 },
                { categoryId: prevCategory.categoryId, displayOrder: currentOrder }
            ];
            
            reorderWaysToTravelCategories(reorderData);
        };

        // Move Ways to Travel category down
        window.moveWaysToTravelDown = function(categoryId) {
            const currentCategory = allWaysToTravelCategories.find(c => c.categoryId === categoryId);
            if (!currentCategory) {
                showToast('Category not found', 'danger');
                return;
            }

            const currentOrder = currentCategory.displayOrder;
            const nextCategory = allWaysToTravelCategories.find(c => c.displayOrder === currentOrder + 1);

            if (!nextCategory) {
                showToast('Cannot move down further', 'warning');
                return;
            }

            // Swap orders - send both in one request
            const reorderData = [
                { categoryId: categoryId, displayOrder: currentOrder + 1 },
                { categoryId: nextCategory.categoryId, displayOrder: currentOrder }
            ];
            
            reorderWaysToTravelCategories(reorderData);
        };

        // Helper function to reorder multiple categories
        function reorderWaysToTravelCategories(reorderData) {
            $.ajax({
                url: `/api/HomePage/ways-to-travel/reorder`,
                type: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(reorderData),
                success: function(response) {
                    if (response.success) {
                        showToast('Categories reordered successfully', 'success');
                        loadWaysToTravelCategories();
                    } else {
                        showToast(response.message || 'Failed to reorder', 'danger');
                    }
                },
                error: function(xhr) {
                    const errorMsg = xhr.responseJSON?.message || 'Failed to reorder categories';
                    showToast(errorMsg, 'danger');
                }
            });
        }

        // Reset modal on close
        $('#waysToTravelModal').on('hidden.bs.modal', function () {
            $('#waysToTravelForm')[0].reset();
            $('#wtCategorySelect').val('');
            $('#wtImage1Preview').hide();
            $('#wtImage2Preview').hide();
            $('#waysToTravelModalLabel').text('Add Category to Ways to Travel');
            // Clear category selection highlight
            $('#wtCategoryTree .category-item-row').removeClass('bg-primary text-white');
        });

        // Add hidden input for selected image URL
        if ($('#selectedImageUrl').length === 0) {
            $('body').append('<input type="hidden" id="selectedImageUrl">');
        }

        // Load configured homepage sections
        function loadHomepageSections() {
            $.ajax({
                url: '/api/HomePage/sections',
                type: 'GET',
                success: function(response) {
                    if (response.success && response.data) {
                        // Map new API response structure
                        allSections = response.data.map(function(section) {
                            return {
                                id: section.id,
                                sectionName: section.sectionName,
                                sectionTitle: section.homepageTitle,
                                layoutStyle: section.layoutStyle,
                                maxItems: section.maxItems,
                                displayOrder: section.displayOrder,
                                isActive: section.isActive,
                                badgeText: section.badgeText || '',
                                customClass: section.customClass || '',
                                spotlightImageUrl: section.spotlightImageUrl || '',
                                selectionMode: section.selectionMode,
                                primaryCategoryId: section.primaryCategoryId,
                                primaryCategoryName: section.primaryCategoryName,
                                categoryIds: section.categoryIds || [],
                                categoryNames: section.categoryNames || [],
                                tourCount: section.tourCount
                            };
                        });

                        displayHomepageSections(allSections);
                    }
                },
                error: function() {
                    showToast('Error loading homepage sections', 'danger');
                }
            });
        }

        // Display homepage sections
        function displayHomepageSections(sections) {
            const container = $('#homepageSectionsList');
            container.empty();

            if (!sections || sections.length === 0) {
                container.append(`
                    <div class="col-12">
                        <div class="alert alert-warning text-center">
                            <i class="ti ti-info-circle me-2"></i>
                            No sections configured yet. Click "Configure New Section" to get started.
                        </div>
                    </div>
                `);
                return;
            }

            // Sort by display order
            sections.sort((a, b) => a.displayOrder - b.displayOrder);

            sections.forEach(function(section) {
                const activeBadge = section.isActive ? 
                    '<span class="badge bg-success">Active</span>' : 
                    '<span class="badge bg-secondary">Inactive</span>';

                const layoutBadge = getLayoutBadge(section.layoutStyle);

                container.append(`
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card border h-100">
                            <div class="card-header bg-light">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0">${section.sectionTitle}</h6>
                                    ${activeBadge}
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-2">
                                    <small class="text-muted">Mode:</small>
                                    <div><span class="badge ${section.selectionMode === 'auto' ? 'bg-info' : 'bg-warning'}">${section.selectionMode === 'auto' ? 'Auto' : 'Manual'}</span></div>
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">${section.selectionMode === 'auto' ? 'Category:' : 'Categories:'}</small>
                                    <div class="fw-bold">${section.selectionMode === 'auto' ? (section.primaryCategoryName || 'N/A') : (section.categoryNames.join(', ') || 'N/A')}</div>
                                </div>
                                <div class="row mb-2">
                                    <div class="col-6">
                                        <small class="text-muted">Tours:</small>
                                        <div>${section.tourCount} available</div>
                                    </div>
                                    <div class="col-6">
                                        <small class="text-muted">Display:</small>
                                        <div>${section.maxItems} items</div>
                                    </div>
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">Layout:</small>
                                    <div>${layoutBadge}</div>
                                </div>
                                ${section.badgeText ? `
                                    <div class="mb-2">
                                        <small class="text-muted">Badge:</small>
                                        <div><span class="badge bg-primary">${section.badgeText}</span></div>
                                    </div>
                                ` : ''}
                                <div class="mb-2">
                                    <small class="text-muted">Order:</small>
                                    <div>${section.displayOrder}</div>
                                </div>
                            </div>
                            <div class="card-footer bg-transparent border-0 pt-0">
                                <div class="btn-group w-100" role="group">
                                    <button class="btn btn-sm btn-outline-primary" onclick="editSection(${section.id})" title="Edit">
                                        <i class="ti ti-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-info" onclick="previewSection(${section.id})" title="Preview">
                                        <i class="ti ti-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-success" onclick="moveSectionUp(${section.id})" title="Move Up">
                                        <i class="ti ti-arrow-up"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-warning" onclick="moveSectionDown(${section.id})" title="Move Down">
                                        <i class="ti ti-arrow-down"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteSection(${section.id})" title="Delete">
                                        <i class="ti ti-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `);
            });
        }

        // Get layout badge styling
        function getLayoutBadge(layoutStyle) {
            const badges = {
                'grid': '<span class="badge bg-primary">Grid (4 cols)</span>',
                'grid-3': '<span class="badge bg-primary">Grid (3 cols)</span>',
                'grid-2': '<span class="badge bg-primary">Grid (2 cols)</span>',
                'spotlight': '<span class="badge bg-warning">Spotlight</span>',
                'carousel': '<span class="badge bg-info">Carousel</span>'
            };
            return badges[layoutStyle] || '<span class="badge bg-secondary">Custom</span>';
        }

        // Handle modal reset
        $('#addSectionModal').on('hidden.bs.modal', function () {
            $('#sectionForm')[0].reset();
            $('#sectionId').val('');
            $('#sectionName').val('');
            $('#categorySelect').val('');
            $('#addSectionModalLabel').text('Configure Homepage Section');
            
            // Clear category selection highlights
            $('#categoryTree .category-item-row').removeClass('bg-primary text-white');
            $('#categoryTreeMulti input[type="checkbox"]').prop('checked', false);
            
            // Reset spotlight image
            $('#spotlightImageUrl').val('');
            $('#spotlightImagePreview').hide();
            $('#spotlightImageContainer').hide();
            
            // Re-enable selection mode toggle
            $('input[name="tourSelectionMode"]').prop('disabled', false);
            
            // Reset to auto mode
            $('#autoMode').prop('checked', true);
            $('#autoModeCategory').show();
            $('#manualModeCategories').hide();
            $('#manualTourSelectionPanel').hide();
            
            // Clear all selections
            selectedTours = [];
            selectedCategoryIds = [];
            availableTours = [];
            
            // Clear containers
            $('#availableToursContainer').html('<div class="text-center text-muted">Select categories first</div>');
            $('#selectedToursContainer').html('<div class="text-center text-muted p-4"><i class="ti ti-inbox fs-1"></i><p class="mt-2 mb-0">No tours selected</p></div>');
            $('#selectedCategoriesList').empty();
            $('#selectedToursCount').text('0');
        });

        // Save section
        $('#saveSectionBtn').on('click', function() {
            const form = $('#sectionForm')[0];
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const sectionId = $('#sectionId').val();
            const isEditMode = !!sectionId;
            const selectionMode = $('input[name="tourSelectionMode"]:checked').val();
            
            // Validate section name
            const sectionName = $('#sectionName').val().trim();
            if (!sectionName) {
                showToast('Please enter section name', 'danger');
                return;
            }
            
            // Validate category selection based on mode
            let primaryCategoryId = null;
            let categoryIds = null;
            
            if (selectionMode === 'auto') {
                primaryCategoryId = $('#categorySelect').val();
                if (!primaryCategoryId) {
                    showToast('Please select a category for auto mode', 'danger');
                    return;
                }
            } else {
                // Manual mode
                if (selectedCategoryIds.length === 0) {
                    showToast('Please select at least one category for manual mode', 'danger');
                    return;
                }
                categoryIds = selectedCategoryIds;
            }
            
            // Validate spotlight image if spotlight layout
            const layoutStyle = $('#layoutStyle').val();
            const spotlightImageUrl = $('#spotlightImageUrl').val();
            
            if (layoutStyle === 'spotlight' && !spotlightImageUrl) {
                showToast('Please select a spotlight background image', 'danger');
                return;
            }
            
            // Check if in manual mode and has selected tours
            let selectedTourIds = null;
            if (selectionMode === 'manual') {
                if (selectedTours.length === 0) {
                    showToast('Please select at least one tour in manual mode', 'danger');
                    return;
                }
                selectedTourIds = selectedTours.map(st => st.id);
            }
            
            const sectionData = {
                sectionName: sectionName,
                homepageTitle: $('#sectionTitle').val(),
                layoutStyle: layoutStyle,
                maxItems: parseInt($('#maxItems').val()),
                displayOrder: parseInt($('#displayOrder').val()),
                isActive: $('#isActive').val() === 'true',
                badgeText: $('#badgeText').val() || null,
                customClass: $('#customClass').val() || null,
                spotlightImageUrl: spotlightImageUrl || null,
                selectionMode: selectionMode,
                primaryCategoryId: primaryCategoryId,
                categoryIds: categoryIds,
                selectedTourIds: selectedTourIds
            };

            // Call new API
            $.ajax({
                url: isEditMode ? `/api/HomePage/sections/${sectionId}` : '/api/HomePage/sections',
                type: isEditMode ? 'PUT' : 'POST',
                contentType: 'application/json',
                data: JSON.stringify(sectionData),
                success: function(response) {
                    if (response.success) {
                        showToast(response.message || 'Section saved successfully!', 'success');
                        $('#addSectionModal').modal('hide');
                        loadHomepageSections();
                    } else {
                        showToast(response.message || 'Failed to save section', 'danger');
                    }
                },
                error: function(xhr) {
                    const errorMsg = xhr.responseJSON?.message || 'Failed to save section';
                    showToast(errorMsg, 'danger');
                }
            });
        });

        // Action functions
        window.editSection = function(id) {
            const section = allSections.find(s => s.id === id);
            if (!section) {
                showToast('Section not found', 'danger');
                return;
            }

            // Populate modal with section data
            $('#addSectionModalLabel').text('Edit Homepage Section');
            $('#sectionId').val(section.id);
            $('#sectionName').val(section.sectionName);
            $('#sectionTitle').val(section.sectionTitle);
            $('#layoutStyle').val(section.layoutStyle);
            $('#maxItems').val(section.maxItems);
            $('#displayOrder').val(section.displayOrder);
            $('#isActive').val(section.isActive.toString());
            $('#badgeText').val(section.badgeText);
            $('#customClass').val(section.customClass);
            
            // Handle spotlight image
            if (section.spotlightImageUrl) {
                $('#spotlightImageUrl').val(section.spotlightImageUrl);
                $('#spotlightImagePreview').show();
                $('#spotlightImagePreviewImg').attr('src', section.spotlightImageUrl);
            }
            
            // Show spotlight image container if spotlight layout
            if (section.layoutStyle === 'spotlight') {
                $('#spotlightImageContainer').show();
            } else {
                $('#spotlightImageContainer').hide();
            }

            // Set selection mode (DISABLE when editing - cannot change)
            const selectionMode = section.selectionMode || 'auto';
            if (selectionMode === 'manual') {
                $('#manualMode').prop('checked', true);
                $('#autoMode').prop('checked', false);
                
                // Show manual mode UI
                $('#autoModeCategory').hide();
                $('#manualModeCategories').show();
                $('#manualTourSelectionPanel').show();
                
                // Load categories and pre-select
                loadCategoriesForMultiSelect();
                
                // Set selected categories
                selectedCategoryIds = section.categoryIds || [];
                
                setTimeout(() => {
                    // Check the selected categories
                    selectedCategoryIds.forEach(catId => {
                        $(`#categoryTreeMulti input[data-category-id="${catId}"]`).prop('checked', true);
                    });
                    renderSelectedCategories();
                    
                    // Load tours from selected categories
                    if (selectedCategoryIds.length > 0) {
                        loadToursFromMultipleCategories(selectedCategoryIds);
                    }
                    
                    // Load already selected tours for this section
                    loadSelectedToursForSection(section.id, selectionMode);
                }, 500);
                
            } else {
                $('#autoMode').prop('checked', true);
                $('#manualMode').prop('checked', false);
                
                // Show auto mode UI
                $('#autoModeCategory').show();
                $('#manualModeCategories').hide();
                $('#manualTourSelectionPanel').hide();
                
                // Set primary category
                $('#categorySelect').val(section.primaryCategoryId);
                
                // Highlight selected category in tree
                setTimeout(() => {
                    $('#categoryTree .category-item-row').removeClass('bg-primary text-white');
                    $(`#categoryTree .category-tree-item[data-category-id="${section.primaryCategoryId}"] .category-item-row`).addClass('bg-primary text-white');
                }, 100);
            }
            
            // DISABLE selection mode toggle when editing (cannot change mode)
            $('input[name="tourSelectionMode"]').prop('disabled', true);

            $('#addSectionModal').modal('show');
        };

        // Load selected tours for editing section
        function loadSelectedToursForSection(sectionId, selectionMode) {
            selectedTours = []; // Reset
            
            // Only load for manual mode
            if (selectionMode !== 'manual') {
                return;
            }
            
            // Load selected tours from new API
            $.ajax({
                url: `/api/HomePage/sections/${sectionId}/tours`,
                type: 'GET',
                success: function(response) {
                    if (response.success && response.data) {
                        selectedTours = response.data;
                        renderSelectedTours();
                    }
                },
                error: function() {
                    console.error('Error loading selected tours');
                }
            });
        }

        window.previewSection = function(id) {
            const section = allSections.find(s => s.id === id);
            if (!section) {
                showToast('Section not found', 'danger');
                return;
            }

            // Show loading
            $('#sectionPreview').html('<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>');
            $('#previewSectionModal').modal('show');

            // Use new preview API
            $.ajax({
                url: `/api/HomePage/sections/${section.id}/preview`,
                type: 'GET',
                success: function(response) {
                    if (response.success && response.data) {
                        const previewData = response.data;
                        const previewHtml = generatePreviewHtml(previewData);
                        $('#sectionPreview').html(previewHtml);
                    } else {
                        $('#sectionPreview').html('<div class="alert alert-warning">No tours found for this section.</div>');
                    }
                },
                error: function() {
                    $('#sectionPreview').html('<div class="alert alert-danger">Error loading section preview. Please try again.</div>');
                }
            });
        };

        window.moveSectionUp = function(id) {
            const section = allSections.find(s => s.id === id);
            if (!section || section.displayOrder <= 0) {
                showToast('Cannot move up further', 'warning');
                return;
            }

            const prevSection = allSections.find(s => s.displayOrder === section.displayOrder - 1);
            if (prevSection) {
                // Swap display orders
                const tempOrder = section.displayOrder;
                section.displayOrder = prevSection.displayOrder;
                prevSection.displayOrder = tempOrder;
                
                // Call API to persist changes
                const reorderData = [
                    { sectionId: section.id, displayOrder: section.displayOrder },
                    { sectionId: prevSection.id, displayOrder: prevSection.displayOrder }
                ];
                
                $.ajax({
                    url: '/api/HomePage/sections/reorder',
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(reorderData),
                    success: function(response) {
                        if (response.success) {
                            showToast('Section moved up successfully', 'success');
                            loadHomepageSections();
                        } else {
                            showToast(response.message || 'Failed to move section', 'danger');
                            loadHomepageSections();
                        }
                    },
                    error: function(xhr) {
                        showToast(xhr.responseJSON?.message || 'Failed to move section', 'danger');
                        loadHomepageSections();
                    }
                });
            }
        };

        window.moveSectionDown = function(id) {
            const section = allSections.find(s => s.id === id);
            const maxOrder = Math.max(...allSections.map(s => s.displayOrder));
            
            if (!section || section.displayOrder >= maxOrder) {
                showToast('Cannot move down further', 'warning');
                return;
            }

            const nextSection = allSections.find(s => s.displayOrder === section.displayOrder + 1);
            if (nextSection) {
                // Swap display orders
                const tempOrder = section.displayOrder;
                section.displayOrder = nextSection.displayOrder;
                nextSection.displayOrder = tempOrder;
                
                // Call API to persist changes
                const reorderData = [
                    { sectionId: section.id, displayOrder: section.displayOrder },
                    { sectionId: nextSection.id, displayOrder: nextSection.displayOrder }
                ];
                
                $.ajax({
                    url: '/api/HomePage/sections/reorder',
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(reorderData),
                    success: function(response) {
                        if (response.success) {
                            showToast('Section moved down successfully', 'success');
                            loadHomepageSections();
                        } else {
                            showToast(response.message || 'Failed to move section', 'danger');
                            loadHomepageSections();
                        }
                    },
                    error: function(xhr) {
                        showToast(xhr.responseJSON?.message || 'Failed to move section', 'danger');
                        loadHomepageSections();
                    }
                });
            }
        };

        window.deleteSection = function(id) {
            const section = allSections.find(s => s.id === id);
            if (!section) {
                showToast('Section not found', 'danger');
                return;
            }

            const categoryInfo = section.selectionMode === 'auto' 
                ? section.primaryCategoryName 
                : section.categoryNames.join(', ');

            $('#deleteSectionInfo').html(
                `<strong>Section:</strong> "${section.sectionTitle}"<br>` +
                `<strong>Mode:</strong> ${section.selectionMode}<br>` +
                `<strong>Categories:</strong> ${categoryInfo}<br>` +
                `<strong>Order:</strong> ${section.displayOrder}`
            );

            $('#confirmDeleteBtn').off('click').on('click', function() {
                // Call new API to delete
                $.ajax({
                    url: `/api/HomePage/sections/${section.id}`,
                    type: 'DELETE',
                    success: function(response) {
                        if (response.success) {
                            showToast('Section removed from homepage', 'success');
                            $('#deleteSectionModal').modal('hide');
                            loadHomepageSections();
                        } else {
                            showToast(response.message || 'Failed to remove section', 'danger');
                        }
                    },
                    error: function(xhr) {
                        const errorMsg = xhr.responseJSON?.message || 'Failed to remove section';
                        showToast(errorMsg, 'danger');
                    }
                });
            });

            $('#deleteSectionModal').modal('show');
        };

        // Generate preview HTML
        function generatePreviewHtml(previewData) {
            let html = `
                <div class="mb-3">
                    <h4>${previewData.homepageTitle}</h4>
                    <div class="mb-2">
                        <span class="badge ${previewData.selectionMode === 'auto' ? 'bg-info' : 'bg-warning'}">${previewData.selectionMode === 'auto' ? 'Auto Mode' : 'Manual Mode'}</span>
                        <span class="badge bg-secondary">${previewData.layoutStyle}</span>
                    </div>
                </div>
            `;

            const tours = previewData.tours || [];

            if (tours.length === 0) {
                html += '<div class="alert alert-info">No tours available in this section.</div>';
                return html;
            }

            if (previewData.layoutStyle === 'spotlight') {
                html += '<div class="row g-3">';
                tours.forEach(tour => {
                    // Get image: use bannerImageUrl first, then first image from Images array
                    const imageUrl = tour.bannerImageUrl || (tour.images && tour.images.length > 0 ? tour.images[0] : null) || '/images/placeholder.jpg';
                    const price = tour.pricePerPerson || 0;
                    html += `
                        <div class="col-md-4">
                            <div class="card">
                                <img src="${imageUrl}" class="card-img-top" alt="${tour.title}" height="200" style="object-fit: cover;">
                                <div class="card-body">
                                    <h6 class="card-title">${tour.title}</h6>
                                    ${tour.duration ? `<p class="text-muted mb-2"><i class="ti ti-clock me-1"></i>${tour.duration}</p>` : ''}
                                    <p class="text-primary fw-bold mb-0">${formatCurrency(price)}</p>
                                </div>
                            </div>
                        </div>
                    `;
                });
                html += '</div>';
            } else if (previewData.layoutStyle === 'grid-3') {
                html += '<div class="row g-3">';
                tours.forEach(tour => {
                    // Get image: use bannerImageUrl first, then first image from Images array
                    const imageUrl = tour.bannerImageUrl || (tour.images && tour.images.length > 0 ? tour.images[0] : null) || '/images/placeholder.jpg';
                    const price = tour.pricePerPerson || 0;
                    html += `
                        <div class="col-md-4">
                            <div class="card">
                                <img src="${imageUrl}" class="card-img-top" alt="${tour.title}" height="150" style="object-fit: cover;">
                                <div class="card-body">
                                    <h6 class="card-title">${tour.title}</h6>
                                    <p class="text-primary fw-bold mb-0">${formatCurrency(price)}</p>
                                </div>
                            </div>
                        </div>
                    `;
                });
                html += '</div>';
            } else {
                html += '<div class="row g-3">';
                tours.forEach(tour => {
                    // Get image: use bannerImageUrl first, then first image from Images array
                    const imageUrl = tour.bannerImageUrl || (tour.images && tour.images.length > 0 ? tour.images[0] : null) || '/images/placeholder.jpg';
                    const price = tour.pricePerPerson || 0;
                    html += `
                        <div class="col-md-3">
                            <div class="card">
                                <img src="${imageUrl}" class="card-img-top" alt="${tour.title}" height="150" style="object-fit: cover;">
                                <div class="card-body p-2">
                                    <h6 class="card-title small">${tour.title}</h6>
                                    <p class="text-primary fw-bold small mb-0">${price.toLocaleString()} VND</p>
                                </div>
                            </div>
                        </div>
                    `;
                });
                html += '</div>';
            }

            return html;
        }
    </script>
}
