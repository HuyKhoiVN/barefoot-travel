<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>@ViewData["Title"] - Barefoot Travel Admin</title>
  <link rel="shortcut icon" type="image/png" href="~/assets/images/logos/favicon.png" />
  <link rel="stylesheet" href="~/assets/css/_styles.min.css" />
</head>

<body>
  <!--  Body Wrapper -->
  <div class="page-wrapper" id="main-wrapper" data-layout="vertical" data-navbarbg="skin6" data-sidebartype="full"
    data-sidebar-position="fixed" data-header-position="fixed">

    <!-- Sidebar Start -->
    @await Html.PartialAsync("~/Views/Admin/_Sidebar.cshtml")
    <!--  Sidebar End -->

    <!--  Main wrapper -->
    <div class="body-wrapper">
      <!--  Header Start -->
      @await Html.PartialAsync("~/Views/Admin/_Header.cshtml")
      <!--  Header End -->

      <div class="body-wrapper-inner">
        <div class="container-fluid">
          @RenderBody()
        </div>
      </div>
    </div>
  </div>

  <script src="~/assets/libs/jquery/dist/jquery.min.js"></script>
  <script src="~/assets/libs/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
  <script src="~/assets/js/sidebarmenu.js"></script>
  <script src="~/assets/js/app.min.js"></script>
  <script src="~/assets/libs/apexcharts/dist/apexcharts.min.js"></script>
  <script src="~/assets/libs/simplebar/dist/simplebar.js"></script>
  <script src="~/assets/js/dashboard.js"></script>
  <!-- solar icons -->
  <script src="https://cdn.jsdelivr.net/npm/iconify-icon@1.0.8/dist/iconify-icon.min.js"></script>
  
  <!-- Global JavaScript Configuration -->
  <script>
    // Base URL configuration for API calls
    var baseUrl = window.location.origin;
    if (!baseUrl.endsWith("/")) {
        baseUrl += "/";
    }
    
      // Global AJAX setup
    let isRefreshing = false;
    let failedQueue = [];

    function processQueue(error, token = null) {
      failedQueue.forEach(prom => {
        if (error) {
          prom.reject(error);
        } else {
          prom.resolve(token);
        }
      });
      
      failedQueue = [];
    }

    function retryRequest(originalRequest) {
      return new Promise((resolve, reject) => {
        failedQueue.push({ resolve, reject });
      }).then(token => {
        originalRequest.headers['Authorization'] = 'Bearer ' + token;
        return originalRequest;
      }).catch(err => {
        return Promise.reject(err);
      });
    }
      $.ajaxSetup({
        beforeSend: function(xhr) {
          // Add JWT token to all requests
          var token = localStorage.getItem('jwt_token');
          if (token) {
            xhr.setRequestHeader('Authorization', 'Bearer ' + token);
          }
        },
        error: function(xhr, status, error) {
          if (xhr.status === 401 && !isRefreshing) {
            isRefreshing = true;
            
            const refreshToken = localStorage.getItem('refresh_token');
            if (refreshToken) {
              // Try to refresh token
              $.ajax({
                url: baseUrl + 'api/auth/refresh',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ refreshToken: refreshToken }),
                success: function(response) {
                  if (response.success && response.data) {
                    localStorage.setItem('jwt_token', response.data.accessToken);
                    if (response.data.refreshToken) {
                      localStorage.setItem('refresh_token', response.data.refreshToken);
                    }
                    console.log('Token refreshed successfully');
                    processQueue(null, response.data.accessToken);
                  } else {
                    // Refresh failed, redirect to login
                    localStorage.removeItem('jwt_token');
                    localStorage.removeItem('refresh_token');
                    processQueue(new Error('Token refresh failed'), null);
                    window.location.href = '/Home/Login';
                  }
                },
                error: function() {
                  // Refresh failed, redirect to login
                  localStorage.removeItem('jwt_token');
                  localStorage.removeItem('refresh_token');
                  processQueue(new Error('Token refresh failed'), null);
                  window.location.href = '/Home/Login';
                },
                complete: function() {
                  isRefreshing = false;
                }
              });
            } else {
              // No refresh token, redirect to login
              localStorage.removeItem('jwt_token');
              localStorage.removeItem('refresh_token');
              window.location.href = '/Home/Login';
            }
          }
        }
      });

    // Logout function
    window.logout = function() {
      localStorage.removeItem('jwt_token');
      localStorage.removeItem('refresh_token');
      window.location.href = '/Home/Login';
    };

    // Check authentication status function
    window.checkAuthStatus = function() {
      const token = localStorage.getItem('jwt_token');
      if (!token) {
        // No token, redirect to login
        window.location.href = '/Home/Login';
        return;
      }

      // Check if token is about to expire (within 5 minutes)
      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        const exp = payload.exp * 1000; // Convert to milliseconds
        const now = Date.now();
        const timeUntilExpiry = exp - now;
        
        // If token expires within 5 minutes, try to refresh
        if (timeUntilExpiry < 5 * 60 * 1000 && timeUntilExpiry > 0) {
          refreshToken();
          return;
        }
        
        // If token is already expired, redirect to login
        if (timeUntilExpiry <= 0) {
          localStorage.removeItem('jwt_token');
          localStorage.removeItem('refresh_token');
          window.location.href = '/Home/Login';
          return;
        }
      } catch (error) {
        console.warn('Error parsing token:', error);
        // If we can't parse the token, try to verify it with the server
      }

      // Verify token is still valid
      $.ajax({
        url: baseUrl + 'api/auth/profile',
        type: 'GET',
        success: function(response) {
          if (!response.success) {
            // Token is invalid, try to refresh
            refreshToken();
          }
        },
        error: function(xhr) {
          if (xhr.status === 401) {
            // Token is invalid, try to refresh
            refreshToken();
          } else {
            // Other error, redirect to login
            localStorage.removeItem('jwt_token');
            localStorage.removeItem('refresh_token');
            window.location.href = '/Home/Login';
          }
        }
      });
    };

    // Refresh token function
    function refreshToken() {
      const refreshToken = localStorage.getItem('refresh_token');
      if (!refreshToken) {
        localStorage.removeItem('jwt_token');
        window.location.href = '/Home/Login';
        return;
      }

      $.ajax({
        url: baseUrl + 'api/auth/refresh',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ refreshToken: refreshToken }),
        success: function(response) {
          if (response.success && response.data) {
            localStorage.setItem('jwt_token', response.data.accessToken);
            if (response.data.refreshToken) {
              localStorage.setItem('refresh_token', response.data.refreshToken);
            }
            console.log('Token refreshed successfully');
          } else {
            localStorage.removeItem('jwt_token');
            localStorage.removeItem('refresh_token');
            window.location.href = '/Home/Login';
          }
        },
        error: function() {
          localStorage.removeItem('jwt_token');
          localStorage.removeItem('refresh_token');
          window.location.href = '/Home/Login';
        }
      });
    }

    // Helper function to make authenticated AJAX calls
    function makeAuthenticatedRequest(options) {
      const originalError = options.error;
      
      options.error = function(xhr, status, error) {
        if (xhr.status === 401) {
          // Try to refresh token
          const refreshToken = localStorage.getItem('refresh_token');
          if (refreshToken) {
            $.ajax({
              url: baseUrl + 'api/auth/refresh',
              type: 'POST',
              contentType: 'application/json',
              data: JSON.stringify({ refreshToken: refreshToken }),
              success: function(response) {
                if (response.success && response.data) {
                  localStorage.setItem('jwt_token', response.data.accessToken);
                  if (response.data.refreshToken) {
                    localStorage.setItem('refresh_token', response.data.refreshToken);
                  }
                  // Retry the original request
                  options.beforeSend = function(xhr) {
                    xhr.setRequestHeader('Authorization', 'Bearer ' + response.data.accessToken);
                  };
                  $.ajax(options);
                } else {
                  localStorage.removeItem('jwt_token');
                  localStorage.removeItem('refresh_token');
                  window.location.href = '/Home/Login';
                }
              },
              error: function() {
                localStorage.removeItem('jwt_token');
                localStorage.removeItem('refresh_token');
                window.location.href = '/Home/Login';
              }
            });
          } else {
            localStorage.removeItem('jwt_token');
            localStorage.removeItem('refresh_token');
            window.location.href = '/Home/Login';
          }
        } else if (originalError) {
          originalError(xhr, status, error);
        }
      };
      
      return $.ajax(options);
    }

    // Check authentication on page load
    $(document).ready(function() {
      checkAuthStatus();
    });
  </script>

  @await RenderSectionAsync("Scripts", required: false)
</body>

</html>
