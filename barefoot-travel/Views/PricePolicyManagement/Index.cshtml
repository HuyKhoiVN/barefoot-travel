@{
    ViewData["Title"] = "Price & Policy Management";
    Layout = "~/Views/Admin/_Layout.cshtml";
}

<div class="row">
    <!-- Price Type Management -->
    <div class="col-md-6 pe-3">
        <div class="card">
            <div class="card-body">
                <div class="d-md-flex align-items-center">
                    <div>
                        <h4 class="card-title">Price Type Management</h4>
                        <p class="card-subtitle">Manage price types for tours (Adult, Child, Senior, etc.)</p>
                    </div>
                    <div class="ms-auto mt-3 mt-md-0">
                        <button type="button" class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#createPriceTypeModal">
                            <i class="ti ti-plus me-2"></i>Add New Price Type
                        </button>
                    </div>
                </div>
                
                <!-- Search and Filter Section -->
                <div class="row mt-4">
                    <div class="col-md-8">
                        <div class="mb-3">
                            <label class="form-label">Search Price Types</label>
                            <input type="text" class="form-control" id="searchPriceTypeInput" placeholder="Search by name...">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">&nbsp;</label>
                            <button type="button" class="btn btn-outline-secondary d-block w-100" id="clearPriceTypeFilters">
                                <i class="ti ti-x me-1"></i>Clear
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Price Types Table -->
                <div class="table-responsive mt-4">
                    <table class="table mb-0 text-nowrap varient-table align-middle fs-3" id="priceTypesTable">
                        <thead>
                            <tr>
                                <th scope="col" class="px-0 text-muted">No.</th>
                                <th scope="col" class="px-0 text-muted sortable" data-sort="priceTypeName">
                                    <span class="sortable-content">Name <i class="ti ti-chevron-up sort-icon" style="opacity: 0.6; color: #6c757d;"></i></span>
                                </th>
                                <th scope="col" class="px-0 text-muted sortable" data-sort="createdTime">
                                    <span class="sortable-content">Created <i class="ti ti-chevron-up sort-icon" style="opacity: 0.6; color: #6c757d;"></i></span>
                                </th>
                                <th scope="col" class="px-0 text-muted text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="priceTypesTableBody">
                            <!-- Data will be loaded here -->
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <nav aria-label="Price Types pagination" class="mt-4">
                    <ul class="pagination justify-content-center" id="priceTypePagination">
                        <!-- Pagination will be generated here -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>

    <!-- Policy Management -->
    <div class="col-md-6 ps-3">
        <div class="card">
            <div class="card-body">
                <div class="d-md-flex align-items-center">
                    <div>
                        <h4 class="card-title">Policy Management</h4>
                        <p class="card-subtitle">Manage policies and terms for tours</p>
                    </div>
                    <div class="ms-auto mt-3 mt-md-0">
                        <button type="button" class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#createPolicyModal">
                            <i class="ti ti-plus me-2"></i>Add New Policy
                        </button>
                    </div>
                </div>
                
                <!-- Search and Filter Section -->
                <div class="row mt-4">
                    <div class="col-md-8">
                        <div class="mb-3">
                            <label class="form-label">Search Policies</label>
                            <input type="text" class="form-control" id="searchPolicyInput" placeholder="Search by policy type...">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">&nbsp;</label>
                            <button type="button" class="btn btn-outline-secondary d-block w-100" id="clearPolicyFilters">
                                <i class="ti ti-x me-1"></i>Clear
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Policies Table -->
                <div class="table-responsive mt-4">
                    <table class="table mb-0 text-nowrap varient-table align-middle fs-3" id="policiesTable">
                        <thead>
                            <tr>
                                <th scope="col" class="px-0 text-muted sortable" data-sort="policyType">
                                    <span class="sortable-content">Policy Type <i class="ti ti-chevron-up sort-icon" style="opacity: 0.6; color: #6c757d;"></i></span>
                                </th>
                                <th scope="col" class="px-0 text-muted sortable" data-sort="createdTime">
                                    <span class="sortable-content">Created <i class="ti ti-chevron-up sort-icon" style="opacity: 0.6; color: #6c757d;"></i></span>
                                </th>
                                <th scope="col" class="px-0 text-muted text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="policiesTableBody">
                            <!-- Data will be loaded here -->
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <nav aria-label="Policies pagination" class="mt-4">
                    <ul class="pagination justify-content-center" id="policyPagination">
                        <!-- Pagination will be generated here -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Create Price Type Modal -->
<div class="modal fade" id="createPriceTypeModal" tabindex="-1" aria-labelledby="createPriceTypeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createPriceTypeModalLabel">Add New Price Type</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createPriceTypeForm">
                    <div class="mb-3">
                        <label class="form-label">Price Type Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="createPriceTypeName" placeholder="e.g., Adult, Child, Senior" required>
                        <div class="form-text">Enter a descriptive name for the price type</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="savePriceTypeBtn">Save Price Type</button>
            </div>
        </div>
    </div>
</div>

<!-- View Price Type Details Modal -->
<div class="modal fade" id="viewPriceTypeModal" tabindex="-1" aria-labelledby="viewPriceTypeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewPriceTypeModalLabel">Price Type Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="priceTypeDetails">
                    <!-- Price type details will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Update Price Type Modal -->
<div class="modal fade" id="updatePriceTypeModal" tabindex="-1" aria-labelledby="updatePriceTypeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updatePriceTypeModalLabel">Update Price Type</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="updatePriceTypeForm">
                    <input type="hidden" id="updatePriceTypeId">
                    <div class="mb-3">
                        <label class="form-label">Price Type Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="updatePriceTypeName" required>
                        <div class="form-text">Enter a descriptive name for the price type</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveUpdateBtn">Update Price Type</button>
            </div>
        </div>
    </div>
</div>

<!-- Create Policy Modal -->
<div class="modal fade" id="createPolicyModal" tabindex="-1" aria-labelledby="createPolicyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createPolicyModalLabel">Add New Policy</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createPolicyForm">
                    <div class="mb-3">
                        <label class="form-label">Policy Type <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="createPolicyType" placeholder="e.g., Cancellation Policy, Refund Policy" required>
                        <div class="form-text">Enter a descriptive name for the policy type</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Policy Content <span class="text-danger">*</span></label>
                        <div id="createPolicyContentContainer">
                            <div class="input-group mb-2">
                                <input type="text" class="form-control policy-content-input" placeholder="Enter policy content item..." required>
                                <button type="button" class="btn btn-outline-danger" onclick="removePolicyContentItem(this)">
                                    <i class="ti ti-trash"></i>
                                </button>
                            </div>
                        </div>
                        <button type="button" class="btn btn-outline-primary btn-sm" onclick="addPolicyContentItem('createPolicyContentContainer')">
                            <i class="ti ti-plus me-1"></i>Add Content Item
                        </button>
                        <div class="form-text">Add multiple content items for this policy. Each input represents one content item.</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="savePolicyBtn">Save Policy</button>
            </div>
        </div>
    </div>
</div>

<!-- View Policy Details Modal -->
<div class="modal fade" id="viewPolicyModal" tabindex="-1" aria-labelledby="viewPolicyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewPolicyModalLabel">Policy Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="policyDetails">
                    <!-- Policy details will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Update Policy Modal -->
<div class="modal fade" id="updatePolicyModal" tabindex="-1" aria-labelledby="updatePolicyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updatePolicyModalLabel">Update Policy</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="updatePolicyForm">
                    <input type="hidden" id="updatePolicyId">
                    <div class="mb-3">
                        <label class="form-label">Policy Type <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="updatePolicyType" required>
                        <div class="form-text">Enter a descriptive name for the policy type</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Policy Content <span class="text-danger">*</span></label>
                        <div id="updatePolicyContentContainer">
                            <div class="input-group mb-2">
                                <input type="text" class="form-control policy-content-input" placeholder="Enter policy content item..." required>
                                <button type="button" class="btn btn-outline-danger" onclick="removePolicyContentItem(this)">
                                    <i class="ti ti-trash"></i>
                                </button>
                            </div>
                        </div>
                        <button type="button" class="btn btn-outline-primary btn-sm" onclick="addPolicyContentItem('updatePolicyContentContainer')">
                            <i class="ti ti-plus me-1"></i>Add Content Item
                        </button>
                        <div class="form-text">Add multiple content items for this policy. Each input represents one content item.</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveUpdatePolicyBtn">Update Policy</button>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="confirmMessage">Are you sure you want to perform this action?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmActionBtn">Confirm</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .sortable {
            cursor: pointer !important;
        }
        
        .sortable:hover .sortable-content {
            background-color: rgba(0, 0, 0, 0.05);
            border-radius: 4px;
            padding: 2px 4px;
            margin: -2px -4px;
            transition: background-color 0.2s ease;
        }
        
        .sort-icon {
            transition: all 0.2s ease;
        }
        
        .sortable:hover .sort-icon {
            opacity: 0.8 !important;
        }
    </style>
    
    <script>
        $(document).ready(function() {
            // Price Type Management Variables
            let currentPriceTypePage = 1;
            let priceTypePageSize = 10;
            let currentPriceTypeFilters = {};
            let currentPriceTypeId = null;
            let priceTypes = [];
            let currentPriceTypeSort = { field: 'priceTypeName', direction: 'asc' };

            // Policy Management Variables
            let currentPolicyPage = 1;
            let policyPageSize = 10;
            let currentPolicyFilters = {};
            let currentPolicyId = null;
            let policies = [];
            let currentPolicySort = { field: 'policyType', direction: 'asc' };

            // Initialize both pages
            initializePriceTypePage();
            initializePolicyPage();

            function initializePriceTypePage() {
                loadPriceTypes();
                setupPriceTypeEventHandlers();
                setupSortableHeaders('#priceTypesTable');
            }

            function initializePolicyPage() {
                loadPolicies();
                setupPolicyEventHandlers();
                setupSortableHeaders('#policiesTable');
            }

            function setupPriceTypeEventHandlers() {
                // Search functionality
                $('#searchPriceTypeInput').on('input', debounce(function() {
                    const searchValue = $('#searchPriceTypeInput').val() || '';
                    currentPriceTypeFilters.priceTypeName = searchValue;
                    currentPriceTypePage = 1;
                    loadPriceTypes();
                }, 500));

                // Clear filters
                $('#clearPriceTypeFilters').on('click', function() {
                    $('#searchPriceTypeInput').val('');
                    currentPriceTypeFilters = {};
                    currentPriceTypePage = 1;
                    loadPriceTypes();
                });

                // Create price type
                $('#savePriceTypeBtn').on('click', function() {
                    createPriceType();
                });

                // Update price type
                $('#saveUpdateBtn').on('click', function() {
                    updatePriceType();
                });

                // Confirmation modal
                $('#confirmActionBtn').on('click', function() {
                    if (window.pendingAction) {
                        window.pendingAction();
                        window.pendingAction = null;
                    }
                    $('#confirmModal').modal('hide');
                });
            }

            function setupPolicyEventHandlers() {
                // Search functionality
                $('#searchPolicyInput').on('input', debounce(function() {
                    const searchValue = $('#searchPolicyInput').val() || '';
                    currentPolicyFilters.policyType = searchValue;
                    currentPolicyPage = 1;
                    loadPolicies();
                }, 500));

                // Clear filters
                $('#clearPolicyFilters').on('click', function() {
                    $('#searchPolicyInput').val('');
                    currentPolicyFilters = {};
                    currentPolicyPage = 1;
                    loadPolicies();
                });

                // Create policy
                $('#savePolicyBtn').on('click', function() {
                    createPolicy();
                });

                // Update policy
                $('#saveUpdatePolicyBtn').on('click', function() {
                    updatePolicy();
                });

                // Reset form when modal is closed
                $('#createPolicyModal').on('hidden.bs.modal', function() {
                    $('#createPolicyForm')[0].reset();
                    setPolicyContentArray('createPolicyContentContainer', []);
                });

                $('#updatePolicyModal').on('hidden.bs.modal', function() {
                    $('#updatePolicyForm')[0].reset();
                    setPolicyContentArray('updatePolicyContentContainer', []);
                });
            }

            function setupSortableHeaders(tableSelector) {
                $(tableSelector + ' .sortable').on('click', function() {
                    const field = $(this).data('sort');
                    const icon = $(this).find('.sort-icon');
                    const isPriceType = tableSelector === '#priceTypesTable';
                    
                    // Reset all icons in this table
                    $(tableSelector + ' .sort-icon').removeClass('ti-chevron-up ti-chevron-down').addClass('ti-chevron-up').css({
                        'opacity': '0.6',
                        'color': '#6c757d'
                    });
                    
                    // Update current sort
                    if (isPriceType) {
                        if (currentPriceTypeSort.field === field) {
                            currentPriceTypeSort.direction = currentPriceTypeSort.direction === 'asc' ? 'desc' : 'asc';
                        } else {
                            currentPriceTypeSort.field = field;
                            currentPriceTypeSort.direction = 'asc';
                        }
                        
                        // Update active icon
                        icon.removeClass('ti-chevron-up ti-chevron-down')
                            .addClass(currentPriceTypeSort.direction === 'asc' ? 'ti-chevron-up' : 'ti-chevron-down')
                            .css({
                                'opacity': '1',
                                'color': '#495057'
                            });
                        
                        currentPriceTypePage = 1;
                        loadPriceTypes();
                    } else {
                        if (currentPolicySort.field === field) {
                            currentPolicySort.direction = currentPolicySort.direction === 'asc' ? 'desc' : 'asc';
                        } else {
                            currentPolicySort.field = field;
                            currentPolicySort.direction = 'asc';
                        }
                        
                        // Update active icon
                        icon.removeClass('ti-chevron-up ti-chevron-down')
                            .addClass(currentPolicySort.direction === 'asc' ? 'ti-chevron-up' : 'ti-chevron-down')
                            .css({
                                'opacity': '1',
                                'color': '#495057'
                            });
                        
                        currentPolicyPage = 1;
                        loadPolicies();
                    }
                });
                
                // Add cursor pointer to sortable headers
                $(tableSelector + ' .sortable').css('cursor', 'pointer');
            }

            function loadPriceTypes() {
                const params = {
                    page: currentPriceTypePage,
                    pageSize: priceTypePageSize,
                    sortBy: currentPriceTypeSort.field,
                    sortOrder: currentPriceTypeSort.direction
                };
                
                // Only add filters that have values
                if (currentPriceTypeFilters.priceTypeName) {
                    params.priceTypeName = currentPriceTypeFilters.priceTypeName;
                }

                $.ajax({
                    url: '/api/pricetype/paged',
                    method: 'GET',
                    data: params,
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        const priceTypes = response.items || response.data?.items || [];
                        const paginationData = response.totalPages ? response : response.items;
                        displayPriceTypes(priceTypes);
                        displayPriceTypePagination(paginationData);
                    },
                    error: function(xhr) {
                        showAlert('Error loading price types', 'danger');
                    }
                });
            }

            function loadPolicies() {
                const params = {
                    page: currentPolicyPage,
                    pageSize: policyPageSize,
                    sortBy: currentPolicySort.field,
                    sortOrder: currentPolicySort.direction
                };
                
                // Only add filters that have values
                if (currentPolicyFilters.policyType) {
                    params.policyType = currentPolicyFilters.policyType;
                }

                $.ajax({
                    url: '/api/policy/paged',
                    method: 'GET',
                    data: params,
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        const policies = response.items || response.data?.items || [];
                        const paginationData = response.totalPages ? response : response.items;
                        displayPolicies(policies);
                        displayPolicyPagination(paginationData);
                    },
                    error: function(xhr) {
                        showAlert('Error loading policies', 'danger');
                    }
                });
            }

            function displayPriceTypes(priceTypes) {
                const tbody = $('#priceTypesTableBody');
                tbody.empty();

                if (priceTypes.length === 0) {
                    tbody.append(`
                        <tr>
                            <td colspan="4" class="text-center py-4">
                                <i class="ti ti-inbox fs-1 text-muted"></i>
                                <h4 class="mt-3">No Price Types Found</h4>
                                <p class="text-muted">No price types match your current filters.</p>
                            </td>
                        </tr>
                    `);
                    return;
                }

                priceTypes.forEach((priceType, index) => {
                    const row = createPriceTypeRow(priceType, index);
                    tbody.append(row);
                });
            }

            function displayPolicies(policies) {
                const tbody = $('#policiesTableBody');
                tbody.empty();

                if (policies.length === 0) {
                    tbody.append(`
                        <tr>
                            <td colspan="3" class="text-center py-4">
                                <i class="ti ti-inbox fs-1 text-muted"></i>
                                <h4 class="mt-3">No Policies Found</h4>
                                <p class="text-muted">No policies match your current filters.</p>
                            </td>
                        </tr>
                    `);
                    return;
                }

                policies.forEach((policy, index) => {
                    const row = createPolicyRow(policy, index);
                    tbody.append(row);
                });
            }

            function createPriceTypeRow(priceType, index) {
                const formattedCreatedDate = formatDateOnly(priceType.createdTime);
                const sequentialNumber = (currentPriceTypePage - 1) * priceTypePageSize + index + 1;

                return `
                    <tr>
                        <td class="px-0">${sequentialNumber}</td>
                        <td class="px-0">
                            <div>
                                <h6 class="mb-0 fw-bolder">${priceType.priceTypeName}</h6>
                            </div>
                        </td>
                        <td class="px-0">${formattedCreatedDate}</td>
                        <td class="px-0 text-end">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-outline-primary" onclick="viewPriceType(${priceType.id})" title="View Details">
                                    <i class="ti ti-eye"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-warning" onclick="editPriceType(${priceType.id})" title="Edit Price Type">
                                    <i class="ti ti-edit"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="deletePriceType(${priceType.id})" title="Delete Price Type">
                                    <i class="ti ti-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }

            function createPolicyRow(policy, index) {
                const formattedCreatedDate = formatDateOnly(policy.createdTime);

                return `
                    <tr>
                        <td class="px-0">
                            <div>
                                <h6 class="mb-0 fw-bolder">${policy.policyType}</h6>
                            </div>
                        </td>
                        <td class="px-0">${formattedCreatedDate}</td>
                        <td class="px-0 text-end">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-outline-primary" onclick="viewPolicy(${policy.id})" title="View Details">
                                    <i class="ti ti-eye"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-warning" onclick="editPolicy(${policy.id})" title="Edit Policy">
                                    <i class="ti ti-edit"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="deletePolicy(${policy.id})" title="Delete Policy">
                                    <i class="ti ti-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }

            function displayPriceTypePagination(response) {
                const pagination = $('#priceTypePagination');
                pagination.empty();

                if (response.totalPages <= 1) return;

                // Previous button
                const prevDisabled = currentPriceTypePage === 1 ? 'disabled' : '';
                pagination.append(`
                    <li class="page-item ${prevDisabled}">
                        <a class="page-link" href="#" onclick="goToPriceTypePage(${currentPriceTypePage - 1})">Previous</a>
                    </li>
                `);

                // Page numbers
                const startPage = Math.max(1, currentPriceTypePage - 2);
                const endPage = Math.min(response.totalPages, currentPriceTypePage + 2);

                for (let i = startPage; i <= endPage; i++) {
                    const activeClass = i === currentPriceTypePage ? 'active' : '';
                    pagination.append(`
                        <li class="page-item ${activeClass}">
                            <a class="page-link" href="#" onclick="goToPriceTypePage(${i})">${i}</a>
                        </li>
                    `);
                }

                // Next button
                const nextDisabled = currentPriceTypePage === response.totalPages ? 'disabled' : '';
                pagination.append(`
                    <li class="page-item ${nextDisabled}">
                        <a class="page-link" href="#" onclick="goToPriceTypePage(${currentPriceTypePage + 1})">Next</a>
                    </li>
                `);
            }

            function displayPolicyPagination(response) {
                const pagination = $('#policyPagination');
                pagination.empty();

                if (response.totalPages <= 1) return;

                // Previous button
                const prevDisabled = currentPolicyPage === 1 ? 'disabled' : '';
                pagination.append(`
                    <li class="page-item ${prevDisabled}">
                        <a class="page-link" href="#" onclick="goToPolicyPage(${currentPolicyPage - 1})">Previous</a>
                    </li>
                `);

                // Page numbers
                const startPage = Math.max(1, currentPolicyPage - 2);
                const endPage = Math.min(response.totalPages, currentPolicyPage + 2);

                for (let i = startPage; i <= endPage; i++) {
                    const activeClass = i === currentPolicyPage ? 'active' : '';
                    pagination.append(`
                        <li class="page-item ${activeClass}">
                            <a class="page-link" href="#" onclick="goToPolicyPage(${i})">${i}</a>
                        </li>
                    `);
                }

                // Next button
                const nextDisabled = currentPolicyPage === response.totalPages ? 'disabled' : '';
                pagination.append(`
                    <li class="page-item ${nextDisabled}">
                        <a class="page-link" href="#" onclick="goToPolicyPage(${currentPolicyPage + 1})">Next</a>
                    </li>
                `);
            }

            function createPriceType() {
                const formData = {
                    priceTypeName: $('#createPriceTypeName').val()
                };

                // Validation
                if (!formData.priceTypeName || formData.priceTypeName.trim() === '') {
                    showAlert('Please enter a price type name', 'warning');
                    return;
                }

                $.ajax({
                    url: '/api/pricetype',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        if (response.success) {
                            showAlert('Price type created successfully', 'success');
                            $('#createPriceTypeModal').modal('hide');
                            $('#createPriceTypeForm')[0].reset();
                            loadPriceTypes();
                        } else {
                            showAlert(response.message || 'Error creating price type', 'danger');
                        }
                    },
                    error: function(xhr) {
                        const errorMessage = xhr.responseJSON?.message || 'Error creating price type';
                        showAlert(errorMessage, 'danger');
                    }
                });
            }

            function updatePriceType() {
                const priceTypeId = $('#updatePriceTypeId').val();
                const formData = {
                    priceTypeName: $('#updatePriceTypeName').val()
                };

                // Validation
                if (!formData.priceTypeName || formData.priceTypeName.trim() === '') {
                    showAlert('Please enter a price type name', 'warning');
                    return;
                }

                $.ajax({
                    url: `/api/pricetype/${priceTypeId}`,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        if (response.success) {
                            showAlert('Price type updated successfully', 'success');
                            $('#updatePriceTypeModal').modal('hide');
                            loadPriceTypes();
                        } else {
                            showAlert(response.message || 'Error updating price type', 'danger');
                        }
                    },
                    error: function(xhr) {
                        const errorMessage = xhr.responseJSON?.message || 'Error updating price type';
                        showAlert(errorMessage, 'danger');
                    }
                });
            }

            // Global functions for onclick handlers
            window.viewPriceType = function(priceTypeId) {
                $.ajax({
                    url: `/api/pricetype/${priceTypeId}`,
                    method: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        if (response.success) {
                            displayPriceTypeDetails(response.data);
                            $('#viewPriceTypeModal').modal('show');
                        }
                    },
                    error: function(xhr) {
                        showAlert('Error loading price type details', 'danger');
                    }
                });
            };

            window.editPriceType = function(priceTypeId) {
                currentPriceTypeId = priceTypeId;
                $('#updatePriceTypeId').val(priceTypeId);
                
                // Find the price type and populate form
                $.ajax({
                    url: `/api/pricetype/${priceTypeId}`,
                    method: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        if (response.success) {
                            const priceType = response.data;
                            $('#updatePriceTypeName').val(priceType.priceTypeName);
                            $('#updatePriceTypeModal').modal('show');
                        }
                    },
                    error: function(xhr) {
                        showAlert('Error loading price type details', 'danger');
                    }
                });
            };

            window.deletePriceType = function(priceTypeId) {
                $.ajax({
                    url: `/api/pricetype/${priceTypeId}`,
                    method: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        if (response.success) {
                            const priceType = response.data;
                            $('#confirmMessage').text(`Are you sure you want to delete price type "${priceType.priceTypeName}"? This action cannot be undone.`);
                            window.pendingAction = function() {
                                $.ajax({
                                    url: `/api/pricetype/${priceTypeId}`,
                                    method: 'DELETE',
                                    headers: {
                                        'Authorization': 'Bearer ' + getAuthToken()
                                    },
                                    success: function(response) {
                                        if (response.success) {
                                            showAlert('Price type deleted successfully', 'success');
                                            loadPriceTypes();
                                        } else {
                                            showAlert(response.message || 'Error deleting price type', 'danger');
                                        }
                                    },
                                    error: function(xhr) {
                                        const errorMessage = xhr.responseJSON?.message || 'Error deleting price type';
                                        showAlert(errorMessage, 'danger');
                                    }
                                });
                            };
                            $('#confirmModal').modal('show');
                        }
                    },
                    error: function(xhr) {
                        showAlert('Error loading price type details', 'danger');
                    }
                });
            };

            window.changePage = function(page) {
                currentPage = page;
                loadPriceTypes();
            };

            function displayPriceTypeDetails(priceType) {
                const detailsHtml = `
                    <div class="row">
                        <div class="col-md-12">
                            <h6>Price Type Information</h6>
                            <table class="table table-sm">
                                <tr><td><strong>Name:</strong></td><td>${priceType.priceTypeName}</td></tr>
                                <tr><td><strong>Created:</strong></td><td>${formatDate(priceType.createdTime)}</td></tr>
                            </table>
                        </div>
                    </div>
                `;
                $('#priceTypeDetails').html(detailsHtml);
            }

            function formatDate(dateString) {
                if (!dateString) return 'N/A';
                const date = new Date(dateString);
                return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
            }

            // Policy Management Functions
            function goToPolicyPage(page) {
                currentPolicyPage = page;
                loadPolicies();
            }

            // Content Management Functions
            window.addPolicyContentItem = function(containerId) {
                const container = document.getElementById(containerId);
                const newItem = document.createElement('div');
                newItem.className = 'input-group mb-2';
                newItem.innerHTML = `
                    <input type="text" class="form-control policy-content-input" placeholder="Enter policy content item..." required>
                    <button type="button" class="btn btn-outline-danger" onclick="removePolicyContentItem(this)">
                        <i class="ti ti-trash"></i>
                    </button>
                `;
                container.appendChild(newItem);
            }

            window.removePolicyContentItem = function(button) {
                const container = button.closest('.input-group').parentElement;
                const items = container.querySelectorAll('.input-group');
                
                // Don't remove if it's the last item
                if (items.length > 1) {
                    button.closest('.input-group').remove();
                } else {
                    // Clear the input instead of removing
                    button.closest('.input-group').querySelector('input').value = '';
                }
            }

            function getPolicyContentArray(containerId) {
                const container = document.getElementById(containerId);
                const inputs = container.querySelectorAll('.policy-content-input');
                return Array.from(inputs)
                    .map(input => input.value.trim())
                    .filter(value => value.length > 0);
            }

            function setPolicyContentArray(containerId, contentArray) {
                const container = document.getElementById(containerId);
                container.innerHTML = '';
                
                if (contentArray && contentArray.length > 0) {
                    contentArray.forEach((content, index) => {
                        const newItem = document.createElement('div');
                        newItem.className = 'input-group mb-2';
                        newItem.innerHTML = `
                            <input type="text" class="form-control policy-content-input" placeholder="Enter policy content item..." value="${content}" required>
                            <button type="button" class="btn btn-outline-danger" onclick="removePolicyContentItem(this)">
                                <i class="ti ti-trash"></i>
                            </button>
                        `;
                        container.appendChild(newItem);
                    });
                } else {
                    // Add one empty item
                    addPolicyContentItem(containerId);
                }
            }

            function createPolicy() {
                const policyType = $('#createPolicyType').val();
                const contentArray = getPolicyContentArray('createPolicyContentContainer');

                // Validation
                if (!policyType || policyType.trim() === '') {
                    showAlert('Please enter a policy type', 'warning');
                    return;
                }

                if (contentArray.length === 0) {
                    showAlert('Please enter at least one policy content item', 'warning');
                    return;
                }

                const formData = {
                    policyType: policyType,
                    content: contentArray
                };

                $.ajax({
                    url: '/api/policy',
                    method: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    data: JSON.stringify(formData),
                    success: function(response) {
                        showAlert('Policy created successfully', 'success');
                        $('#createPolicyModal').modal('hide');
                        $('#createPolicyForm')[0].reset();
                        // Reset content container to have one empty item
                        setPolicyContentArray('createPolicyContentContainer', []);
                        loadPolicies();
                    },
                    error: function(xhr) {
                        const errorMessage = xhr.responseJSON?.message || 'Error creating policy';
                        showAlert(errorMessage, 'danger');
                    }
                });
            }

            window.viewPolicy = function(id) {
                $.ajax({
                    url: `/api/policy/${id}`,
                    method: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        const policy = response.data || response;
                        displayPolicyDetails(policy);
                        $('#viewPolicyModal').modal('show');
                    },
                    error: function(xhr) {
                        showAlert('Error loading policy details', 'danger');
                    }
                });
            }

            window.editPolicy = function(id) {
                $.ajax({
                    url: `/api/policy/${id}`,
                    method: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        const policy = response.data || response;
                        $('#updatePolicyId').val(policy.id);
                        $('#updatePolicyType').val(policy.policyType);
                        
                        // Set content array in the update container
                        setPolicyContentArray('updatePolicyContentContainer', policy.content || []);
                        
                        $('#updatePolicyModal').modal('show');
                    },
                    error: function(xhr) {
                        showAlert('Error loading policy details', 'danger');
                    }
                });
            }

            function updatePolicy() {
                const id = $('#updatePolicyId').val();
                const policyType = $('#updatePolicyType').val();
                const contentArray = getPolicyContentArray('updatePolicyContentContainer');

                // Validation
                if (!policyType || policyType.trim() === '') {
                    showAlert('Please enter a policy type', 'warning');
                    return;
                }

                if (contentArray.length === 0) {
                    showAlert('Please enter at least one policy content item', 'warning');
                    return;
                }

                const formData = {
                    policyType: policyType,
                    content: contentArray
                };

                $.ajax({
                    url: `/api/policy/${id}`,
                    method: 'PUT',
                    contentType: 'application/json',
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    data: JSON.stringify(formData),
                    success: function(response) {
                        showAlert('Policy updated successfully', 'success');
                        $('#updatePolicyModal').modal('hide');
                        loadPolicies();
                    },
                    error: function(xhr) {
                        const errorMessage = xhr.responseJSON?.message || 'Error updating policy';
                        showAlert(errorMessage, 'danger');
                    }
                });
            }

             window.deletePolicy = function(id) {
                // First get the policy details to show in confirmation
                $.ajax({
                    url: `/api/policy/${id}`,
                    method: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        const policy = response.data || response;
                        $('#confirmMessage').text(`Are you sure you want to delete the policy "${policy.policyType}"?`);
                        $('#confirmModal').modal('show');
                        
                        window.pendingAction = function() {
                            $.ajax({
                                url: `/api/policy/${id}`,
                                method: 'DELETE',
                                headers: {
                                    'Authorization': 'Bearer ' + getAuthToken()
                                },
                                success: function(response) {
                                    showAlert('Policy deleted successfully', 'success');
                                    loadPolicies();
                                },
                                error: function(xhr) {
                                    const errorMessage = xhr.responseJSON?.message || 'Error deleting policy';
                                    showAlert(errorMessage, 'danger');
                                }
                            });
                        };
                    },
                    error: function(xhr) {
                        showAlert('Error loading policy details', 'danger');
                    }
                });
            }

            function displayPolicyDetails(policy) {
                // Convert content array to HTML list with better formatting
                const contentHtml = Array.isArray(policy.content) && policy.content.length > 0
                    ? policy.content.map((item, index) => `<li class="mb-2">${item}</li>`).join('')
                    : '<li class="text-muted">No content available</li>';

                const detailsHtml = `
                    <div class="row">
                        <div class="col-md-12">
                            <h6>Policy Information</h6>
                            <table class="table table-sm">
                                <tr><td><strong>Policy Type:</strong></td><td>${policy.policyType}</td></tr>
                                <tr><td><strong>Content:</strong></td><td><ol class="mb-0 ps-3">${contentHtml}</ol></td></tr>
                                <tr><td><strong>Created:</strong></td><td>${formatDate(policy.createdTime)}</td></tr>
                            </table>
                        </div>
                    </div>
                `;
                $('#policyDetails').html(detailsHtml);
            }

            // Price Type Management Functions
            function goToPriceTypePage(page) {
                currentPriceTypePage = page;
                loadPriceTypes();
            }

            function formatDateOnly(dateString) {
                if (!dateString) return 'N/A';
                const date = new Date(dateString);
                return date.toLocaleDateString();
            }

            function showAlert(message, type) {
                // Use the new toast system
                showToast(message, type, {
                    duration: 5000,
                    closable: true
                });
            }

            function getAuthToken() {
                // Get token from localStorage or cookie
                return localStorage.getItem('authToken') || getCookie('authToken');
            }

            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
                return null;
            }

            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }
        });
    </script>
}
