@{
    ViewData["Title"] = "Booking Calendar";
    Layout = "~/Views/Admin/_Layout.cshtml";
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="d-md-flex align-items-center">
                    <div>
                        <h4 class="card-title">Booking Calendar</h4>
                        <p class="card-subtitle">View bookings organized by calendar dates</p>
                    </div>
                    <div class="ms-auto mt-3 mt-md-0 d-flex align-items-center gap-3">
                        <div class="text-muted">
                            <i class="ti ti-calendar me-2"></i>
                            <span id="currentMonthDisplay">Loading...</span>
                        </div>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-primary btn-sm" id="prevMonthBtn">
                                <i class="ti ti-chevron-left"></i>
                            </button>
                            <button type="button" class="btn btn-primary btn-sm" id="currentMonthBtn">
                                <i class="ti ti-calendar"></i>
                            </button>
                            <button type="button" class="btn btn-outline-primary btn-sm" id="nextMonthBtn">
                                <i class="ti ti-chevron-right"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
               
                <!-- View Mode Selector -->
                <div class="row mt-3">
                    <div class="col-md-12">
                        <div class="card mb-0">
                            <div class="card-body">
                                <div class="row align-items-center">
                                    <div class="col-md-3">
                                        <label class="form-label fw-bold">View Mode:</label>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="btn-group" role="group" id="viewModeGroup">
                                            <input type="radio" class="btn-check" name="viewMode" id="singleMonth" value="1" checked>
                                            <label class="btn btn-outline-primary" for="singleMonth">
                                                <i class="ti ti-calendar me-1"></i>Single Month
                                            </label>
                                            
                                            <input type="radio" class="btn-check" name="viewMode" id="threeMonths" value="3">
                                            <label class="btn btn-outline-primary" for="threeMonths">
                                                <i class="ti ti-calendar-grid me-1"></i>3 Months
                                            </label>
                                            
                                            <input type="radio" class="btn-check" name="viewMode" id="sixMonths" value="6">
                                            <label class="btn btn-outline-primary" for="sixMonths">
                                                <i class="ti ti-calendar-grid me-1"></i>6 Months
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Calendar Container -->
                <div class="calendar-slider-container mt-4">
                    <div class="calendar-slider-wrapper">
                        <div class="calendar-slider" id="calendarSlider">
                            <!-- Calendar will be loaded here -->
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<!-- Day Details Modal -->
<div class="modal fade" id="dayDetailsModal" tabindex="-1" aria-labelledby="dayDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="dayDetailsModalLabel">Bookings for <span id="selectedDate"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="dayBookingsList">
                    <!-- Day bookings will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Booking Details Modal -->
<div class="modal fade" id="bookingDetailsModal" tabindex="-1" aria-labelledby="bookingDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="bookingDetailsModalLabel">Booking Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="bookingDetailsContent">
                    <!-- Booking details will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="editBookingBtn">Edit Booking</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .calendar-slider-container {
            position: relative;
            overflow: hidden;
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        }

        .calendar-slider-wrapper {
            overflow: hidden;
            border-radius: 12px;
            background: #ffffff;
        }

        .calendar-slider {
            display: flex;
            transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            width: 100%;
            padding: 8px;
        }
        
        /* Grid View Styles */
        .calendar-grid-view {
            display: grid;
            gap: 20px;
            width: 100%;
            padding: 8px;
        }
        
        .calendar-grid-view.mode-3 {
            grid-template-columns: repeat(3, 1fr);
        }
        
        .calendar-grid-view.mode-6 {
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(2, 1fr);
        }
        
        .calendar-grid-view .calendar-month {
            width: 100%;
            margin: 0;
        }
        
        /* Responsive Grid */
        @@media (max-width: 1200px) {
            .calendar-grid-view.mode-6 {
                grid-template-columns: repeat(2, 1fr);
                grid-template-rows: repeat(3, 1fr);
            }
        }
        
        @@media (max-width: 768px) {
            .calendar-grid-view.mode-3,
            .calendar-grid-view.mode-6 {
                grid-template-columns: 1fr;
                grid-template-rows: auto;
            }
        }

        .calendar-month {
            width: 100%;
            flex-shrink: 0;
            background: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
            overflow: hidden;
        }

        .calendar-header {
            background: linear-gradient( 135deg, #2446db 0%, #225ea1 100%);
            color: #ffffff;
            padding: 12px 16px;
            text-align: center;
            font-weight: 600;
            font-size: 14px;
            letter-spacing: 0.5px;
            text-transform: uppercase;
            border-radius: 8px 8px 0 0;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background-color: #f8f9fa;
            border: none;
            border-radius: 0 0 8px 8px;
            overflow: hidden;
        }

        .calendar-day {
            background-color: #ffffff;
            min-height: 120px;
            padding: 8px 6px;
            position: relative;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid #e8eaed;
            font-size: 12px;
            color: #3c4043;
            overflow: hidden;
        }

        .calendar-day-header {
            background-color: #f1f3f4;
            padding: 8px 4px;
            text-align: center;
            font-weight: 600;
            font-size: 11px;
            color: #5f6368;
            border-bottom: 1px solid #e8eaed;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .booking-mini-card {
            background: #f8f9fa;
            border: 1px solid #e8eaed;
            border-radius: 6px;
            padding: 4px 6px;
            margin: 2px 0;
            font-size: 10px;
            font-weight: 500;
            color: #3c4043;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 100%;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
            max-height: 30px;
        }

        .booking-mini-card:hover {
            background: #e8f0fe;
            border-color: #4285f4;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .booking-mini-card.hidden {
            display: none;
        }

        .day-number {
            font-size: 12px;
            font-weight: 600;
            color: #3c4043;
            margin-bottom: 4px;
        }

        .calendar-day:hover {
            background-color: #f8f9fa;
            border-color: #4285f4;
        }

        .calendar-day.other-month {
            background-color: #f8f9fa;
            color: #9aa0a6;
        }

        .calendar-day.today {
            background-color: #e8f0fe;
            border-color: #4285f4;
        }

        .calendar-day.has-bookings {
            background-color: #f0f7ff;
            border-color: #4285f4;
        }

        .calendar-day:hover {
            background-color: #f8f9fa;
            border-color: #007bff;
        }

        .calendar-day.other-month {
            background-color: #f8f9fa;
            color: #6c757d;
        }

        .calendar-day.today {
            background-color: #e3f2fd;
            border-color: #2196f3;
        }

        .calendar-day.has-bookings {
            background-color: #fff3cd;
            border-color: #ffc107;
        }

        .day-number {
            font-weight: bold;
            margin-bottom: 0.25rem;
            font-size: 0.9rem;
        }

        .booking-mini-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 0.25rem 0.5rem;
            margin-bottom: 0.25rem;
            border-radius: 4px;
            font-size: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .booking-mini-card:hover {
            transform: scale(1.02);
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        }

        .booking-mini-card.pending {
            background: linear-gradient(135deg, #ffc107 0%, #ff8f00 100%);
        }

        .booking-mini-card.confirmed {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        }

        .booking-mini-card.in-progress {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        }

        .booking-mini-card.complete {
            background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);
        }

        .booking-mini-card.cancel {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        }

        .more-bookings {
            background-color: #6c757d;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.7rem;
            text-align: center;
            cursor: pointer;
        }

        .summary-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 8px;
            padding: 1.5rem;
            text-align: center;
        }

        .summary-card h3 {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .summary-card p {
            margin-bottom: 0;
            opacity: 0.9;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 9999;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .loading-content {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            text-align: center;
        }

        .booking-card {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            transition: all 0.2s ease;
        }

        .booking-card:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }

        .booking-status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .status-pending {
            background-color: #fff3cd;
            color: #856404;
        }

        .status-confirmed {
            background-color: #e8f5e8;
            color: #137333;
            border-color: #34a853;
        }

        .status-in-progress {
            background-color: #e8f0fe;
            color: #1a73e8;
            border-color: #4285f4;
        }

        .status-complete {
            background-color: #e8f5e8;
            color: #137333;
            border-color: #34a853;
        }

        .status-cancel {
            background-color: #fce8e6;
            color: #d93025;
            border-color: #ea4335;
        }

        .payment-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .payment-paid {
            background-color: #e8f5e8;
            color: #137333;
        }

        .payment-pending {
            background-color: #fff3cd;
            color: #856404;
        }

        .payment-failed {
            background-color: #fce8e6;
            color: #d93025;
        }

        @@media (max-width: 768px) {
            .calendar-slider {
                width: 300%;
                gap: 4px;
                padding: 4px;
            }
            
            .calendar-month {
                width: calc(33.333% - 2.67px);
            }
            
            .calendar-grid {
                font-size: 0.7rem;
                gap: 1px;
            }
            
            .calendar-day {
                min-height: 80px;
                padding: 4px 3px;
                font-size: 10px;
            }
            
            .booking-mini-card {
                font-size: 8px;
                padding: 2px 3px;
                margin: 1px 0;
                max-height: 16px;
            }
            
            .calendar-header {
                font-size: 12px;
                padding: 8px 12px;
            }
            
            .calendar-day-header {
                font-size: 10px;
                padding: 6px 3px;
            }
            
            .day-number {
                font-size: 11px;
                margin-bottom: 2px;
            }
        }
    </style>
    
    <script>
        $(document).ready(function() {
            let currentDate = new Date();
            let calendarData = null;
            let currentViewMode = 1; // 1 = single month, 3 = 3 months, 6 = 6 months
            
            // Initialize date pickers
            initializeDatePickers();
            
            // Load initial calendar (current month only)
            loadCurrentMonthCalendar();
            
            // Event handlers
            setupEventHandlers();
            
            // Setup view mode handlers
            setupViewModeHandlers();
            
            function initializeDatePickers() {
                const today = new Date();
                const threeMonthsLater = new Date(today);
                threeMonthsLater.setMonth(threeMonthsLater.getMonth() + 2);
                
                $('#startDatePicker').val(formatDateForInput(today));
                $('#endDatePicker').val(formatDateForInput(threeMonthsLater));
                
                currentStartDate = today;
                currentEndDate = threeMonthsLater;
            }
            
            function loadCurrentMonthCalendar() {
                const today = new Date();
                const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                
                // Set current date to today
                currentDate = today;
                
                // Load current month only
                loadCalendarForMonth(startOfMonth, endOfMonth);
            }
            
            function setupEventHandlers() {
                // Navigation buttons
                $('#prevMonthBtn').on('click', function() {
                    navigateToPreviousMonth();
                });
                
                $('#nextMonthBtn').on('click', function() {
                    navigateToNextMonth();
                });
                
                $('#currentMonthBtn').on('click', function() {
                    navigateToCurrentMonth();
                });
                
                // Load calendar button
                $('#loadCalendarBtn').on('click', function() {
                    const startDate = new Date($('#startDatePicker').val());
                    const endDate = new Date($('#endDatePicker').val());
                    
                    if (startDate > endDate) {
                        showToast('Start date cannot be later than end date', 'warning');
                        return;
                    }
                    
                    const maxEndDate = new Date(startDate);
                    maxEndDate.setMonth(maxEndDate.getMonth() + 3);
                    
                    if (endDate > maxEndDate) {
                        showToast('Date range cannot exceed 3 months', 'warning');
                        return;
                    }
                    
                    currentStartDate = startDate;
                    currentEndDate = endDate;
                    loadCalendar();
                });
                
                // Clear dates
                $('#clearDateBtn').on('click', function() {
                    initializeDatePickers();
                    loadCalendar();
                });
                
                // Show weekends toggle
                $('#showWeekendsSwitch').on('change', function() {
                    loadCalendar();
                });
            }
            
            function updateDatePickers() {
                $('#startDatePicker').val(formatDateForInput(currentStartDate));
                $('#endDatePicker').val(formatDateForInput(currentEndDate));
            }
            
            function navigateToPreviousMonth() {
                if (currentViewMode === 1) {
                    currentDate.setMonth(currentDate.getMonth() - 1);
                } else if (currentViewMode === 3) {
                    currentDate.setMonth(currentDate.getMonth() - 3);
                } else if (currentViewMode === 6) {
                    currentDate.setMonth(currentDate.getMonth() - 6);
                }
                loadMonthData(currentDate);
            }
            
            function navigateToNextMonth() {
                if (currentViewMode === 1) {
                    currentDate.setMonth(currentDate.getMonth() + 1);
                } else if (currentViewMode === 3) {
                    currentDate.setMonth(currentDate.getMonth() + 3);
                } else if (currentViewMode === 6) {
                    currentDate.setMonth(currentDate.getMonth() + 6);
                }
                loadMonthData(currentDate);
            }
            
            function navigateToCurrentMonth() {
                currentDate = new Date(); // Reset to current month
                loadMonthData(currentDate);
            }
            
            function loadMonthData(targetDate) {
                let startOfMonth, endOfMonth;
                
                if (currentViewMode === 1) {
                    // Single month
                    startOfMonth = new Date(targetDate.getFullYear(), targetDate.getMonth(), 1);
                    endOfMonth = new Date(targetDate.getFullYear(), targetDate.getMonth() + 1, 0);
                } else if (currentViewMode === 3) {
                    // 3 months
                    startOfMonth = new Date(targetDate.getFullYear(), targetDate.getMonth(), 1);
                    endOfMonth = new Date(targetDate.getFullYear(), targetDate.getMonth() + 3, 0);
                } else if (currentViewMode === 6) {
                    // 6 months
                    startOfMonth = new Date(targetDate.getFullYear(), targetDate.getMonth(), 1);
                    endOfMonth = new Date(targetDate.getFullYear(), targetDate.getMonth() + 6, 0);
                }
                
                console.log(`Loading ${currentViewMode} month(s) data for ${targetDate.getFullYear()}-${targetDate.getMonth() + 1}`);
                console.log(`Start: ${startOfMonth.toISOString()}, End: ${endOfMonth.toISOString()}`);
                
                loadCalendarForMonth(startOfMonth, endOfMonth);
            }
            
            function loadCalendarForMonth(startDate, endDate) {
                loadCalendar(startDate, endDate);
            }
            
            function loadCalendar(startDate, endDate) {
                showLoading();
                
                const startDateStr = formatDateForApi(startDate);
                const endDateStr = formatDateForApi(endDate);
                
                $.ajax({
                    url: '/api/admin/booking/calendar',
                    method: 'GET',
                    data: {
                        startDate: startDateStr,
                        endDate: endDateStr
                    },
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        hideLoading();
                        console.log('API Response:', response);
                        if (response.success) {
                            console.log('Calendar Data:', response.data);
                            displayCalendar(response.data);
                        } else {
                            showToast('Error loading calendar: ' + response.message, 'danger');
                        }
                    },
                    error: function(xhr) {
                        hideLoading();
                        showToast('Error loading calendar', 'danger');
                    }
                });
            }
            
            function displayCalendar(data) {
                console.log('Displaying calendar with data:', data);
                calendarData = data;
                
                const container = $('#calendarSlider');
                container.empty();
                
                if (!data.months || data.months.length === 0) {
                    console.log('No months data available');
                    container.html('<div class="alert alert-info">No calendar data available</div>');
                    return;
                }
                
                if (currentViewMode === 1) {
                    // Single month view
                    displaySingleMonth(data);
                } else {
                    // Grid view (3 or 6 months)
                    displayGridMonths(data);
                }
                
                updateMonthDisplay();
            }
            
            function displaySingleMonth(data) {
                const container = $('#calendarSlider');
                container.removeClass('calendar-grid-view').addClass('calendar-slider');
                
                // Find the current month instead of just taking the first one
                const today = new Date();
                const currentYear = today.getFullYear();
                const currentMonth = today.getMonth() + 1; // JavaScript months are 0-based
                
                console.log('Looking for current month:', currentMonth, 'year:', currentYear);
                
                let month = data.months.find(m => m.year === currentYear && m.month === currentMonth);
                
                if (!month) {
                    console.log('Current month not found, using first available month');
                    // Fallback to first month if current month not found
                    month = data.months[0];
                }
                
                console.log('Displaying month:', month);
                
                if (month) {
                    const monthHtml = createMonthHtml(month, 'current');
                    container.append(monthHtml);
                    console.log('Month HTML created and appended');
                } else {
                    console.log('No month data found');
                    container.html('<div class="alert alert-info">No month data available</div>');
                }
            }
            
            function displayGridMonths(data) {
                const container = $('#calendarSlider');
                container.removeClass('calendar-slider').addClass('calendar-grid-view');
                
                // Add mode class
                container.removeClass('mode-3 mode-6').addClass(`mode-${currentViewMode}`);
                
                console.log(`Displaying ${data.months.length} months in grid mode`);
                
                data.months.forEach((month, index) => {
                    const monthHtml = createMonthHtml(month, 'grid');
                    container.append(monthHtml);
                    console.log(`Month ${index + 1} HTML created: ${month.monthName}`);
                });
            }
            
            function updateMonthDisplay() {
                if (!calendarData || !calendarData.months) return;
                
                if (currentViewMode === 1) {
                    // Single month display
                    const today = new Date();
                    const currentYear = today.getFullYear();
                    const currentMonth = today.getMonth() + 1; // JavaScript months are 0-based
                    
                    const month = calendarData.months.find(m => m.year === currentYear && m.month === currentMonth);
                    
                    if (month) {
                        // Format month name in English (e.g., "Oct - 2025")
                        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                                         'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                        const monthName = monthNames[month.month - 1] + ' - ' + month.year;
                        $('#currentMonthDisplay').text(monthName);
                    } else {
                        // Fallback to current date
                        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                                         'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                        const monthName = monthNames[currentDate.getMonth()] + ' - ' + currentDate.getFullYear();
                        $('#currentMonthDisplay').text(monthName);
                    }
                } else {
                    // Grid view display - show range
                    if (calendarData.months.length > 0) {
                        const firstMonth = calendarData.months[0];
                        const lastMonth = calendarData.months[calendarData.months.length - 1];
                        
                        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                                         'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                        
                        let displayText;
                        if (firstMonth.year === lastMonth.year) {
                            // Same year
                            displayText = `${monthNames[firstMonth.month - 1]} - ${monthNames[lastMonth.month - 1]} ${firstMonth.year}`;
                        } else {
                            // Different years
                            displayText = `${monthNames[firstMonth.month - 1]} ${firstMonth.year} - ${monthNames[lastMonth.month - 1]} ${lastMonth.year}`;
                        }
                        
                        $('#currentMonthDisplay').text(displayText);
                    }
                }
            }
            
            function createMonthHtml(month, type = 'current') {
                console.log('Creating month HTML for:', month);
                const showWeekends = true; // Always show weekends since we removed the switch
                const today = new Date();
                
                // Get first day of month and calculate starting day
                const firstDay = new Date(month.year, month.month - 1, 1);
                const startDay = firstDay.getDay(); // 0 = Sunday, 1 = Monday, etc.
                
                // Get last day of month
                const lastDay = new Date(month.year, month.month, 0);
                const daysInMonth = lastDay.getDate();
                
                console.log(`Month: ${month.month}, Year: ${month.year}, Days in month: ${daysInMonth}, Start day: ${startDay}`);
                console.log('Month days data:', month.days);
                console.log(`Total cells needed: ${startDay + daysInMonth} (${startDay} empty + ${daysInMonth} days)`);
                
                let html = `
                    <div class="calendar-month ${type}">
                        <div class="calendar-header">
                            ${month.monthName}
                        </div>
                        <div class="calendar-grid">
                            <div class="calendar-day-header">Sun</div>
                            <div class="calendar-day-header">Mon</div>
                            <div class="calendar-day-header">Tue</div>
                            <div class="calendar-day-header">Wed</div>
                            <div class="calendar-day-header">Thu</div>
                            <div class="calendar-day-header">Fri</div>
                            <div class="calendar-day-header">Sat</div>
                `;
                
                // Add empty cells for days before the first day of the month
                for (let i = 0; i < startDay; i++) {
                    html += '<div class="calendar-day other-month"></div>';
                }
                console.log(`Added ${startDay} empty cells`);
                
                let daysAdded = 0;
                // Add days of the month
                for (let day = 1; day <= daysInMonth; day++) {
                    const date = new Date(month.year, month.month - 1, day);
                    const dayData = month.days ? month.days.find(d => {
                        // Compare dates properly - d.date is ISO string from API
                        const apiDate = new Date(d.date);
                        return apiDate.getDate() === day && 
                               apiDate.getMonth() === month.month - 1 && 
                               apiDate.getFullYear() === month.year;
                    }) : null;
                    
                    // Debug logging for first few days
                    if (day <= 5) {
                        console.log(`Day ${day}: date=${date.toDateString()}, dayData=`, dayData);
                    }
                    
                    let dayClass = 'calendar-day';
                    if (date.toDateString() === today.toDateString()) {
                        dayClass += ' today';
                    }
                    if (dayData && dayData.totalBookings > 0) {
                        dayClass += ' has-bookings';
                    }
                    
                    // Skip weekends if not showing them
                    if (!showWeekends && (date.getDay() === 0 || date.getDay() === 6)) {
                        html += `<div class="calendar-day other-month"></div>`;
                        continue;
                    }
                    
                    html += `<div class="${dayClass}" onclick="showDayDetails('${formatDateForApi(date)}')">`;
                    html += `<div class="day-number">${day}</div>`;
                    
                    if (dayData && dayData.bookings.length > 0) {
                        // Calculate how many cards can fit in the day cell
                        const maxCards = Math.floor((120 - 20) / 32); // 120px min-height - 20px for day number, 32px per card (30px + 2px margin)
                        const bookingsToShow = dayData.bookings.slice(0, maxCards);
                        
                        bookingsToShow.forEach(booking => {
                            const statusClass = getStatusClass(booking.statusName);
                            const truncatedTitle = truncateText(booking.tourTitle, 15); // Limit to 15 characters
                            html += `<div class="booking-mini-card ${statusClass}" onclick="event.stopPropagation(); showBookingDetails(${booking.id})" title="${booking.tourTitle} - ${booking.people} people">`;
                            html += `${truncatedTitle} (${booking.people})`;
                            html += '</div>';
                        });
                        
                        // Show "more" indicator if there are more bookings
                        if (dayData.bookings.length > maxCards) {
                            html += `<div class="more-bookings" onclick="event.stopPropagation(); showDayDetails('${formatDateForApi(date)}')">+${dayData.bookings.length - maxCards} more</div>`;
                        }
                    }
                    
                    html += '</div>';
                    daysAdded++;
                }
                
                console.log(`Added ${daysAdded} days out of ${daysInMonth} total days`);
                
                html += `
                        </div>
                    </div>
                `;
                return html;
            }
            
            
            function getStatusClass(statusName) {
                const statusMap = {
                    'Pending': 'pending',
                    'Confirmed': 'confirmed',
                    'In Progress': 'in-progress',
                    'Complete': 'complete',
                    'Cancel': 'cancel'
                };
                return statusMap[statusName] || 'pending';
            }
            
            // Global functions for onclick handlers
            window.showDayDetails = function(date) {
                console.log('Showing day details for:', date);
                $('#selectedDate').text(formatDateForDisplay(date));
                
                // Convert date string to Date object for API call
                const selectedDate = new Date(date);
                const startDateStr = formatDateForApi(selectedDate);
                const endDateStr = formatDateForApi(selectedDate);
                
                console.log('API call with startDate:', startDateStr, 'endDate:', endDateStr);
                
                $.ajax({
                    url: '/api/admin/booking/calendar',
                    method: 'GET',
                    data: {
                        startDate: startDateStr,
                        endDate: endDateStr
                    },
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        console.log('Day details API response:', response);
                        if (response.success && response.data.months.length > 0) {
                            const month = response.data.months[0];
                            // Find the specific day data
                            const dayData = month.days.find(d => {
                                const dDate = new Date(d.date);
                                return dDate.toDateString() === selectedDate.toDateString();
                            });
                            
                            if (dayData && dayData.bookings.length > 0) {
                                console.log('Found day data with bookings:', dayData.bookings.length);
                                displayDayBookings(dayData.bookings);
                            } else {
                                console.log('No bookings found for this date');
                                $('#dayBookingsList').html('<p class="text-muted text-center">No bookings for this date.</p>');
                            }
                        } else {
                            console.log('No months data in response');
                            $('#dayBookingsList').html('<p class="text-muted text-center">No bookings for this date.</p>');
                        }
                    },
                    error: function(xhr) {
                        console.error('Error loading day details:', xhr);
                        $('#dayBookingsList').html('<p class="text-danger text-center">Error loading bookings.</p>');
                    }
                });
                
                $('#dayDetailsModal').modal('show');
            };
            
            window.showBookingDetails = function(bookingId) {
                $.ajax({
                    url: `/api/admin/booking/${bookingId}`,
                    method: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        if (response.success) {
                            displayBookingDetails(response.data);
                            $('#bookingDetailsModal').modal('show');
                        } else {
                            showToast('Error loading booking details', 'danger');
                        }
                    },
                    error: function() {
                        showToast('Error loading booking details', 'danger');
                    }
                });
            };
            
            function displayDayBookings(bookings) {
                let html = '';
                bookings.forEach(booking => {
                    const statusClass = getStatusClass(booking.statusName);
                    const paymentClass = getPaymentClass(booking.paymentStatus);
                    
                    html += `
                        <div class="booking-card">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6 class="mb-1">${booking.tourTitle}</h6>
                                    <p class="mb-1 text-muted">${booking.nameCustomer} - ${booking.people} people</p>
                                    <p class="mb-0 text-muted">${booking.phoneNumber}</p>
                                </div>
                                <div class="text-end">
                                    <span class="booking-status-badge status-${statusClass}">${booking.statusName}</span>
                                    <br>
                                    <span class="payment-badge payment-${paymentClass}">${booking.paymentStatus}</span>
                                    <br>
                                    <small class="text-muted">$${booking.totalPrice.toFixed(2)}</small>
                                </div>
                            </div>
                            <div class="mt-2">
                                <button class="btn btn-sm btn-outline-primary" onclick="showBookingDetails(${booking.id})">
                                    <i class="ti ti-eye me-1"></i>View Details
                                </button>
                            </div>
                        </div>
                    `;
                });
                
                $('#dayBookingsList').html(html);
            }
            
            function displayBookingDetails(booking) {
                const statusClass = getStatusClass(booking.statusName);
                const paymentClass = getPaymentClass(booking.paymentStatus);
                
                const html = `
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Booking Information</h6>
                            <table class="table table-sm">
                                <tr><td><strong>Tour:</strong></td><td>${booking.tourTitle}</td></tr>
                                <tr><td><strong>Start Date:</strong></td><td>${formatDateForDisplay(booking.startDate)}</td></tr>
                                <tr><td><strong>People:</strong></td><td>${booking.people}</td></tr>
                                <tr><td><strong>Total Price:</strong></td><td>$${booking.totalPrice.toFixed(2)}</td></tr>
                                <tr><td><strong>Status:</strong></td><td><span class="booking-status-badge status-${statusClass}">${booking.statusName}</span></td></tr>
                                <tr><td><strong>Payment:</strong></td><td><span class="payment-badge payment-${paymentClass}">${booking.paymentStatus}</span></td></tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6>Customer Information</h6>
                            <table class="table table-sm">
                                <tr><td><strong>Name:</strong></td><td>${booking.nameCustomer}</td></tr>
                                <tr><td><strong>Phone:</strong></td><td>${booking.phoneNumber}</td></tr>
                                <tr><td><strong>Email:</strong></td><td>${booking.email || 'Not provided'}</td></tr>
                                <tr><td><strong>Created:</strong></td><td>${formatDateForDisplay(booking.createdTime)}</td></tr>
                            </table>
                        </div>
                    </div>
                    ${booking.note ? `
                        <div class="mt-3">
                            <h6>Notes</h6>
                            <div class="alert alert-info" style="white-space: pre-line;">${booking.note}</div>
                        </div>
                    ` : ''}
                `;
                
                $('#bookingDetailsContent').html(html);
            }
            
            function getPaymentClass(paymentStatus) {
                const paymentMap = {
                    'Paid': 'paid',
                    'Pending': 'pending',
                    'Failed': 'failed'
                };
                return paymentMap[paymentStatus] || 'pending';
            }
            
            function formatDateForInput(date) {
                return date.toISOString().split('T')[0];
            }
            
            function truncateText(text, maxLength) {
                if (text.length <= maxLength) return text;
                return text.substring(0, maxLength - 3) + '...';
            }
            
            function formatDateForApi(date) {
                // Use local date to avoid timezone issues
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }
            
            function formatDateForDisplay(dateString) {
                const date = new Date(dateString);
                const options = { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric',
                    locale: 'en-US'
                };
                return date.toLocaleDateString('en-US', options);
            }
            
            function showLoading() {
                $('body').append(`
                    <div id="loadingOverlay" class="loading-overlay">
                        <div class="loading-content">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="mt-2">Loading calendar...</div>
                        </div>
                    </div>
                `);
            }
            
            function hideLoading() {
                $('#loadingOverlay').remove();
            }
            
            function showToast(message, type) {
                // Use the existing toast system
                if (typeof window.showToast === 'function') {
                    window.showToast(message, type, {
                        duration: 5000,
                        closable: true
                    });
                } else {
                    // Fallback to alert if toast system is not available
                    alert(message);
                }
            }
            
            function getAuthToken() {
                return localStorage.getItem('authToken') || getCookie('authToken');
            }
            
            function setupViewModeHandlers() {
                $('input[name="viewMode"]').on('change', function() {
                    currentViewMode = parseInt($(this).val());
                    console.log('View mode changed to:', currentViewMode);
                    loadCalendarForCurrentViewMode();
                });
            }
            
            function loadCalendarForCurrentViewMode() {
                const today = new Date();
                let startDate, endDate;
                
                if (currentViewMode === 1) {
                    // Single month
                    startDate = new Date(today.getFullYear(), today.getMonth(), 1);
                    endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                } else if (currentViewMode === 3) {
                    // 3 months
                    startDate = new Date(today.getFullYear(), today.getMonth(), 1);
                    endDate = new Date(today.getFullYear(), today.getMonth() + 3, 0);
                } else if (currentViewMode === 6) {
                    // 6 months
                    startDate = new Date(today.getFullYear(), today.getMonth(), 1);
                    endDate = new Date(today.getFullYear(), today.getMonth() + 6, 0);
                }
                
                console.log(`Loading ${currentViewMode} month(s) from ${startDate.toISOString()} to ${endDate.toISOString()}`);
                loadCalendarForMonth(startDate, endDate);
            }
            
            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
                return null;
            }
        });
    </script>
}
