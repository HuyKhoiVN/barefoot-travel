@{
    ViewData["Title"] = "Tour Management";
    Layout = "~/Views/Admin/_Layout.cshtml";
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="d-md-flex align-items-center">
                    <div>
                        <h4 class="card-title">Tour Management</h4>
                        <p class="card-subtitle">Manage tours, categories, and pricing</p>
                    </div>
                    <div class="ms-auto mt-3 mt-md-0">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createTourModal">
                            <i class="ti ti-plus me-2"></i>Add New Tour
                        </button>
                    </div>
                </div>
                
                <!-- Search and Filter Section -->
                <div class="row mt-4">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Search Tours</label>
                            <input type="text" class="form-control" id="searchInput" placeholder="Search by title...">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <select class="form-select" id="categoryFilter">
                                <option value="">All Categories</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" id="statusFilter">
                                <option value="">All Status</option>
                                <option value="true">Active</option>
                                <option value="false">Inactive</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="mb-3">
                            <label class="form-label">&nbsp;</label>
                            <button type="button" class="btn btn-outline-secondary d-block w-100" id="clearFilters">
                                <i class="ti ti-x me-1"></i>Clear
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Tours Table -->
                <div class="table-responsive mt-4">
                    <table class="table mb-0 text-nowrap varient-table align-middle fs-3" id="toursTable">
                        <thead>
                            <tr>
                                <th scope="col" class="px-0 text-muted">Image</th>
                                <th scope="col" class="px-0 text-muted">Title</th>
                                <th scope="col" class="px-0 text-muted">Price</th>
                                <th scope="col" class="px-0 text-muted">Duration</th>
                                <th scope="col" class="px-0 text-muted">Max People</th>
                                <th scope="col" class="px-0 text-muted">Status</th>
                                <th scope="col" class="px-0 text-muted text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="toursTableBody">
                            <!-- Data will be loaded here -->
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <nav aria-label="Tours pagination" class="mt-4">
                    <ul class="pagination justify-content-center" id="pagination">
                        <!-- Pagination will be generated here -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Create Tour Modal -->
<div class="modal fade" id="createTourModal" tabindex="-1" aria-labelledby="createTourModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createTourModalLabel">Add New Tour</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createTourForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Title <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="createTitle" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Duration <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="createDuration" placeholder="e.g., 3 days 2 nights" required>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Price Per Person <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="createPricePerPerson" step="0.01" min="0" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Max People <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="createMaxPeople" min="1" required>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Start Time</label>
                                <input type="time" class="form-control" id="createStartTime">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Return Time</label>
                                <input type="time" class="form-control" id="createReturnTime">
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Map Link</label>
                        <input type="url" class="form-control" id="createMapLink" placeholder="https://maps.google.com/...">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description <span class="text-danger">*</span></label>
                        <textarea class="form-control" id="createDescription" rows="4" required></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Categories</label>
                                <select class="form-select" id="createCategories" multiple>
                                    <!-- Categories will be loaded here -->
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Policies</label>
                                <select class="form-select" id="createPolicies" multiple>
                                    <!-- Policies will be loaded here -->
                                </select>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveTourBtn">Save Tour</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Tour Modal -->
<div class="modal fade" id="editTourModal" tabindex="-1" aria-labelledby="editTourModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTourModalLabel">Edit Tour</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editTourForm">
                    <input type="hidden" id="editTourId">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Title <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="editTitle" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Duration <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="editDuration" placeholder="e.g., 3 days 2 nights" required>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Price Per Person <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="editPricePerPerson" step="0.01" min="0" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Max People <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="editMaxPeople" min="1" required>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Start Time</label>
                                <input type="time" class="form-control" id="editStartTime">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Return Time</label>
                                <input type="time" class="form-control" id="editReturnTime">
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Map Link</label>
                        <input type="url" class="form-control" id="editMapLink" placeholder="https://maps.google.com/...">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description <span class="text-danger">*</span></label>
                        <textarea class="form-control" id="editDescription" rows="4" required></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Categories</label>
                                <select class="form-select" id="editCategories" multiple>
                                    <!-- Categories will be loaded here -->
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Policies</label>
                                <select class="form-select" id="editPolicies" multiple>
                                    <!-- Policies will be loaded here -->
                                </select>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="updateTourBtn">Update Tour</button>
            </div>
        </div>
    </div>
</div>

<!-- Tour Details Modal -->
<div class="modal fade" id="tourDetailsModal" tabindex="-1" aria-labelledby="tourDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="tourDetailsModalLabel">Tour Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="tourDetailsContent">
                <!-- Tour details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="confirmMessage">Are you sure you want to perform this action?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmBtn">Confirm</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
$(document).ready(function() {
    let currentPage = 1;
    let pageSize = 10;
    let currentFilters = {};

    // Initialize page
    loadTours();
    loadCategories();
    loadPolicies();

    // Search functionality
    $('#searchInput').on('input', debounce(function() {
        currentFilters.search = $(this).val();
        currentPage = 1;
        loadTours();
    }, 500));

    // Filter functionality
    $('#categoryFilter, #statusFilter').on('change', function() {
        currentFilters.categoryId = $('#categoryFilter').val();
        currentFilters.active = $('#statusFilter').val();
        currentPage = 1;
        loadTours();
    });

    // Clear filters
    $('#clearFilters').on('click', function() {
        $('#searchInput').val('');
        $('#categoryFilter').val('');
        $('#statusFilter').val('');
        currentFilters = {};
        currentPage = 1;
        loadTours();
    });

    // Load tours with pagination and filters
    function loadTours() {
        const params = {
            page: currentPage,
            pageSize: pageSize,
            sortBy: 'createdTime',
            sortOrder: 'desc',
            ...currentFilters
        };

        $.ajax({
            url: baseUrl + 'api/tour/paged',
            type: 'GET',
            data: params,
            success: function(response) {
                // Handle both direct response and wrapped response
                const tours = response.items || response.data?.items || [];
                const paginationData = response.totalPages ? response : response.data;
                displayTours(tours);
                displayPagination(paginationData);
            },
            error: function(xhr) {
                if (xhr.status === 401) {
                    // Unauthorized, redirect to login
                    localStorage.removeItem('jwt_token');
                    window.location.href = '/Home/Login';
                } else {
                    showAlert('Error loading tours: ' + (xhr.responseJSON?.message || xhr.responseText), 'danger');
                }
            }
        });
    }

    // Display tours in table
    function displayTours(tours) {
        const tbody = $('#toursTableBody');
        tbody.empty();

        if (tours.length === 0) {
            tbody.append(`
                <tr>
                    <td colspan="7" class="text-center py-4">
                        <i class="ti ti-inbox fs-1 text-muted"></i>
                        <h4 class="mt-3">No Tours Found</h4>
                        <p class="text-muted">No tours match your current filters.</p>
                    </td>
                </tr>
            `);
            return;
        }

        tours.forEach(tour => {
            const statusBadge = tour.active ? 
                '<span class="badge bg-success">Active</span>' : 
                '<span class="badge bg-secondary">Inactive</span>';
            
            const imageUrl = tour.images && tour.images.length > 0 ? 
                tour.images[0].imageUrl : 
                '/assets/images/products/s1.jpg';

            tbody.append(`
                <tr>
                    <td class="px-0">
                        <img src="${imageUrl}" class="rounded" width="50" height="50" alt="Tour image" style="object-fit: cover;">
                    </td>
                    <td class="px-0">
                        <h6 class="mb-0 fw-bolder">${tour.title}</h6>
                        <span class="text-muted">${tour.description.substring(0, 50)}...</span>
                    </td>
                    <td class="px-0">$${tour.pricePerPerson}</td>
                    <td class="px-0">${tour.duration}</td>
                    <td class="px-0">${tour.maxPeople}</td>
                    <td class="px-0">${statusBadge}</td>
                    <td class="px-0 text-end">
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-sm btn-outline-primary" onclick="viewTour(${tour.id})" title="View Details">
                                <i class="ti ti-eye"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-warning" onclick="editTour(${tour.id})" title="Edit">
                                <i class="ti ti-edit"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteTour(${tour.id})" title="Delete">
                                <i class="ti ti-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `);
        });
    }

    // Display pagination
    function displayPagination(response) {
        const pagination = $('#pagination');
        pagination.empty();

        if (response.totalPages <= 1) return;

        // Previous button
        const prevDisabled = currentPage === 1 ? 'disabled' : '';
        pagination.append(`
            <li class="page-item ${prevDisabled}">
                <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">Previous</a>
            </li>
        `);

        // Page numbers
        const startPage = Math.max(1, currentPage - 2);
        const endPage = Math.min(response.totalPages, currentPage + 2);

        for (let i = startPage; i <= endPage; i++) {
            const activeClass = i === currentPage ? 'active' : '';
            pagination.append(`
                <li class="page-item ${activeClass}">
                    <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
                </li>
            `);
        }

        // Next button
        const nextDisabled = currentPage === response.totalPages ? 'disabled' : '';
        pagination.append(`
            <li class="page-item ${nextDisabled}">
                <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">Next</a>
            </li>
        `);
    }

    // Load categories for filters and forms
    function loadCategories() {
        $.ajax({
            url: baseUrl + 'api/category',
            type: 'GET',
            success: function(response) {
                // Handle both direct response and wrapped response
                const categories = response.success ? response.data : response;
                const categoryFilter = $('#categoryFilter');
                const createCategories = $('#createCategories');
                const editCategories = $('#editCategories');

                if (Array.isArray(categories)) {
                    categories.forEach(category => {
                        categoryFilter.append(`<option value="${category.id}">${category.categoryName}</option>`);
                        createCategories.append(`<option value="${category.id}">${category.categoryName}</option>`);
                        editCategories.append(`<option value="${category.id}">${category.categoryName}</option>`);
                    });
                }
            },
            error: function(xhr) {
                console.error('Error loading categories:', xhr.responseText);
            }
        });
    }

    // Load policies for forms
    function loadPolicies() {
        $.ajax({
            url: baseUrl + 'api/policy',
            type: 'GET',
            success: function(response) {
                // Handle both direct response and wrapped response
                const policies = response.success ? response.data : response;
                const createPolicies = $('#createPolicies');
                const editPolicies = $('#editPolicies');

                if (Array.isArray(policies)) {
                    policies.forEach(policy => {
                        createPolicies.append(`<option value="${policy.id}">${policy.policyType}</option>`);
                        editPolicies.append(`<option value="${policy.id}">${policy.policyType}</option>`);
                    });
                }
            },
            error: function(xhr) {
                console.error('Error loading policies:', xhr.responseText);
            }
        });
    }

    // Create tour
    $('#saveTourBtn').on('click', function() {
        // Validate required fields
        if (!$('#createTitle').val() || !$('#createDescription').val() || !$('#createPricePerPerson').val() || !$('#createMaxPeople').val() || !$('#createDuration').val()) {
            showAlert('Please fill in all required fields.', 'danger');
            return;
        }

        const tourData = {
            title: $('#createTitle').val(),
            description: $('#createDescription').val(),
            mapLink: $('#createMapLink').val() || null,
            pricePerPerson: parseFloat($('#createPricePerPerson').val()),
            maxPeople: parseInt($('#createMaxPeople').val()),
            duration: $('#createDuration').val(),
            startTime: $('#createStartTime').val() || null,
            returnTime: $('#createReturnTime').val() || null,
            images: [], // Will be handled separately if needed
            categories: $('#createCategories').val() || [],
            prices: [], // Will be handled separately if needed
            policies: $('#createPolicies').val() || []
        };

        $.ajax({
            url: baseUrl + 'api/tour',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(tourData),
            success: function(response) {
                if (response.success) {
                    showAlert('Tour created successfully!', 'success');
                    $('#createTourModal').modal('hide');
                    $('#createTourForm')[0].reset();
                    loadTours();
                } else {
                    showAlert('Error creating tour: ' + (response.message || 'Unknown error'), 'danger');
                }
            },
            error: function(xhr) {
                if (xhr.status === 401) {
                    localStorage.removeItem('jwt_token');
                    window.location.href = '/Home/Login';
                } else {
                    const errorMessage = xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
                    showAlert('Error creating tour: ' + errorMessage, 'danger');
                }
            }
        });
    });

    // Update tour
    $('#updateTourBtn').on('click', function() {
        const tourId = $('#editTourId').val();
        
        // Validate required fields
        if (!$('#editTitle').val() || !$('#editDescription').val() || !$('#editPricePerPerson').val() || !$('#editMaxPeople').val() || !$('#editDuration').val()) {
            showAlert('Please fill in all required fields.', 'danger');
            return;
        }

        const tourData = {
            title: $('#editTitle').val(),
            description: $('#editDescription').val(),
            mapLink: $('#editMapLink').val() || null,
            pricePerPerson: parseFloat($('#editPricePerPerson').val()),
            maxPeople: parseInt($('#editMaxPeople').val()),
            duration: $('#editDuration').val(),
            startTime: $('#editStartTime').val() || null,
            returnTime: $('#editReturnTime').val() || null,
            categories: $('#editCategories').val() || [],
            policies: $('#editPolicies').val() || []
        };

        $.ajax({
            url: baseUrl + 'api/tour/' + tourId,
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(tourData),
            success: function(response) {
                if (response.success) {
                    showAlert('Tour updated successfully!', 'success');
                    $('#editTourModal').modal('hide');
                    loadTours();
                } else {
                    showAlert('Error updating tour: ' + (response.message || 'Unknown error'), 'danger');
                }
            },
            error: function(xhr) {
                if (xhr.status === 401) {
                    localStorage.removeItem('jwt_token');
                    window.location.href = '/Home/Login';
                } else {
                    const errorMessage = xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
                    showAlert('Error updating tour: ' + errorMessage, 'danger');
                }
            }
        });
    });

    // Global functions for actions
    window.changePage = function(page) {
        currentPage = page;
        loadTours();
    };

    window.viewTour = function(tourId) {
        $.ajax({
            url: baseUrl + 'api/tour/' + tourId,
            type: 'GET',
            success: function(response) {
                // Handle both direct response and wrapped response
                const tour = response.success ? response.data : response;
                if (tour) {
                    displayTourDetails(tour);
                    $('#tourDetailsModal').modal('show');
                } else {
                    showAlert('Error loading tour details: Tour not found', 'danger');
                }
            },
            error: function(xhr) {
                if (xhr.status === 401) {
                    localStorage.removeItem('jwt_token');
                    window.location.href = '/Home/Login';
                } else {
                    const errorMessage = xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
                    showAlert('Error loading tour details: ' + errorMessage, 'danger');
                }
            }
        });
    };

    window.editTour = function(tourId) {
        $.ajax({
            url: baseUrl + 'api/tour/' + tourId,
            type: 'GET',
            success: function(response) {
                // Handle both direct response and wrapped response
                const tour = response.success ? response.data : response;
                if (tour) {
                    populateEditForm(tour);
                    $('#editTourModal').modal('show');
                } else {
                    showAlert('Error loading tour: Tour not found', 'danger');
                }
            },
            error: function(xhr) {
                if (xhr.status === 401) {
                    localStorage.removeItem('jwt_token');
                    window.location.href = '/Home/Login';
                } else {
                    const errorMessage = xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
                    showAlert('Error loading tour: ' + errorMessage, 'danger');
                }
            }
        });
    };

    window.deleteTour = function(tourId) {
        $('#confirmMessage').text('Are you sure you want to delete this tour? This action cannot be undone.');
        $('#confirmBtn').off('click').on('click', function() {
            $.ajax({
                url: baseUrl + 'api/tour/' + tourId,
                type: 'DELETE',
                success: function(response) {
                    if (response.success) {
                        showAlert('Tour deleted successfully!', 'success');
                        $('#confirmModal').modal('hide');
                        loadTours();
                    } else {
                        showAlert('Error deleting tour: ' + (response.message || 'Unknown error'), 'danger');
                    }
                },
                error: function(xhr) {
                    if (xhr.status === 401) {
                        localStorage.removeItem('jwt_token');
                        window.location.href = '/Home/Login';
                    } else {
                        const errorMessage = xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
                        showAlert('Error deleting tour: ' + errorMessage, 'danger');
                    }
                }
            });
        });
        $('#confirmModal').modal('show');
    };

    // Helper functions
    function displayTourDetails(tour) {
        const statusBadge = tour.active ? 
            '<span class="badge bg-success">Active</span>' : 
            '<span class="badge bg-secondary">Inactive</span>';

        const categories = tour.categories ? tour.categories.map(c => c.categoryName).join(', ') : 'None';
        const policies = tour.policies ? tour.policies.map(p => p.policyType).join(', ') : 'None';

        $('#tourDetailsContent').html(`
            <div class="row">
                <div class="col-md-8">
                    <h4>${tour.title}</h4>
                    <p class="text-muted">${tour.description}</p>
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Price per Person:</strong> $${tour.pricePerPerson}</p>
                            <p><strong>Duration:</strong> ${tour.duration}</p>
                            <p><strong>Max People:</strong> ${tour.maxPeople}</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Start Time:</strong> ${tour.startTime || 'Not specified'}</p>
                            <p><strong>Return Time:</strong> ${tour.returnTime || 'Not specified'}</p>
                            <p><strong>Status:</strong> ${statusBadge}</p>
                        </div>
                    </div>
                    ${tour.mapLink ? `<p><strong>Map Link:</strong> <a href="${tour.mapLink}" target="_blank">View Map</a></p>` : ''}
                </div>
                <div class="col-md-4">
                    <h5>Categories</h5>
                    <p>${categories}</p>
                    <h5>Policies</h5>
                    <p>${policies}</p>
                </div>
            </div>
        `);
    }

    function populateEditForm(tour) {
        $('#editTourId').val(tour.id);
        $('#editTitle').val(tour.title);
        $('#editDescription').val(tour.description);
        $('#editMapLink').val(tour.mapLink || '');
        $('#editPricePerPerson').val(tour.pricePerPerson);
        $('#editMaxPeople').val(tour.maxPeople);
        $('#editDuration').val(tour.duration);
        $('#editStartTime').val(tour.startTime || '');
        $('#editReturnTime').val(tour.returnTime || '');

        // Set selected categories
        if (tour.categories) {
            const categoryIds = tour.categories.map(c => c.id.toString());
            $('#editCategories').val(categoryIds);
        }

        // Set selected policies
        if (tour.policies) {
            const policyIds = tour.policies.map(p => p.id.toString());
            $('#editPolicies').val(policyIds);
        }
    }

    function showAlert(message, type) {
        const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
        const alertHtml = `
            <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                <i class="ti ti-${type === 'success' ? 'check-circle' : 'alert-circle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        // Remove existing alerts
        $('.alert').remove();
        
        // Add new alert at the top of the page
        $('.card-body').prepend(alertHtml);
        
        // Auto-hide after 5 seconds
        setTimeout(function() {
            $('.alert').fadeOut();
        }, 5000);
    }

    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
});
</script>
}
