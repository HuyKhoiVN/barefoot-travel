@{
    ViewData["Title"] = "User Management";
    Layout = "~/Views/Admin/_Layout.cshtml";
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="d-md-flex align-items-center">
                    <div>
                        <h4 class="card-title">User Management</h4>
                        <p class="card-subtitle">Manage users, roles, and permissions</p>
                    </div>
                    <div class="ms-auto mt-3 mt-md-0">
                        <button type="button" class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#createUserModal">
                            <i class="ti ti-plus me-2"></i>Add New User
                        </button>
                        
                    </div>
                </div>
                
                <!-- Search and Filter Section -->
                <div class="row mt-4">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Search Users</label>
                            <input type="text" class="form-control" id="searchInput" placeholder="Search by username, name, email...">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="mb-3">
                            <label class="form-label">Role</label>
                            <select class="form-select" id="roleFilter">
                                <option value="">All Roles</option>
                                <option value="1">Admin</option>
                                <option value="2">User</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="mb-3">
                            <label class="form-label">Date From</label>
                            <input type="date" class="form-control" id="dateFromFilter">
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="mb-3">
                            <label class="form-label">Date To</label>
                            <input type="date" class="form-control" id="dateToFilter">
                        </div>
                    </div>
                    <div class="col-md-1">
                        <div class="mb-3">
                            <label class="form-label">&nbsp;</label>
                            <button type="button" class="btn btn-outline-secondary d-block w-100" id="clearFilters">
                                <i class="ti ti-x me-1"></i>Clear
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Users Table -->
                <div class="table-responsive mt-4">
                    <table class="table mb-0 text-nowrap varient-table align-middle fs-3" id="usersTable">
                        <thead>
                            <tr>
                                <th scope="col" class="px-0 text-muted">No.</th>
                                <th scope="col" class="px-0 text-muted sortable" data-sort="username">
                                    <span class="sortable-content">User <i class="ti ti-chevron-up sort-icon" style="opacity: 0.6; color: #6c757d;"></i></span>
                                </th>
                                <th scope="col" class="px-0 text-muted sortable" data-sort="email">
                                    <span class="sortable-content">Email <i class="ti ti-chevron-up sort-icon" style="opacity: 0.6; color: #6c757d;"></i></span>
                                </th>
                                <th scope="col" class="px-0 text-muted sortable" data-sort="phone">
                                    <span class="sortable-content">Phone <i class="ti ti-chevron-up sort-icon" style="opacity: 0.6; color: #6c757d;"></i></span>
                                </th>
                                <th scope="col" class="px-0 text-muted sortable" data-sort="roleId">
                                    <span class="sortable-content">Role <i class="ti ti-chevron-up sort-icon" style="opacity: 0.6; color: #6c757d;"></i></span>
                                </th>
                                <th scope="col" class="px-0 text-muted sortable" data-sort="createdTime">
                                    <span class="sortable-content">Created <i class="ti ti-chevron-up sort-icon" style="opacity: 0.6; color: #6c757d;"></i></span>
                                </th>
                                <th scope="col" class="px-0 text-muted text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="usersTableBody">
                            <!-- Data will be loaded here -->
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <nav aria-label="Users pagination" class="mt-4">
                    <ul class="pagination justify-content-center" id="pagination">
                        <!-- Pagination will be generated here -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Create User Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createUserModalLabel">Add New User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createUserForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Username <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="createUsername" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Full Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="createFullName" required>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Password <span class="text-danger">*</span></label>
                                <input type="password" class="form-control" id="createPassword" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Role <span class="text-danger">*</span></label>
                                <select class="form-select" id="createRoleId" required>
                                    <option value="2">User</option>
                                    <option value="1">Admin</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" id="createEmail">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Phone</label>
                                <input type="tel" class="form-control" id="createPhone">
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Photo URL</label>
                        <input type="url" class="form-control" id="createPhoto" placeholder="https://example.com/photo.jpg">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveUserBtn">Save User</button>
            </div>
        </div>
    </div>
</div>

<!-- View User Details Modal -->
<div class="modal fade" id="viewUserModal" tabindex="-1" aria-labelledby="viewUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewUserModalLabel">User Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="userDetails">
                    <!-- User details will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Update User Modal -->
<div class="modal fade" id="updateUserModal" tabindex="-1" aria-labelledby="updateUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateUserModalLabel">Update User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="updateUserForm">
                    <input type="hidden" id="updateUserId">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Username</label>
                                <input type="text" class="form-control" id="updateUsername" readonly>
                                <small class="text-muted">Username cannot be changed</small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Full Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="updateFullName" required>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" id="updateEmail">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Phone</label>
                                <input type="tel" class="form-control" id="updatePhone">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Role <span class="text-danger">*</span></label>
                                <select class="form-select" id="updateRoleId" required>
                                    <option value="1">Admin</option>
                                    <option value="2">User</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Photo URL</label>
                                <input type="url" class="form-control" id="updatePhoto" placeholder="https://example.com/photo.jpg">
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveUpdateBtn">Update User</button>
            </div>
        </div>
    </div>
</div>

<!-- Change Password Modal -->
<div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changePasswordModalLabel">Reset User Password</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="changePasswordForm">
                    <input type="hidden" id="changePasswordUserId">
                    <div class="mb-3">
                        <label class="form-label">New Password <span class="text-danger">*</span></label>
                        <input type="password" class="form-control" id="newPassword" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Confirm New Password <span class="text-danger">*</span></label>
                        <input type="password" class="form-control" id="confirmPassword" required>
                    </div>
                    <div class="alert alert-info">
                        <i class="ti ti-info-circle me-2"></i>
                        <strong>Admin Password Reset:</strong> This will reset the user's password without requiring their current password.
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="savePasswordBtn">Reset Password</button>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="confirmMessage">Are you sure you want to perform this action?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmActionBtn">Confirm</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .sortable {
            cursor: pointer !important;
        }
        
        .sortable:hover .sortable-content {
            background-color: rgba(0, 0, 0, 0.05);
            border-radius: 4px;
            padding: 2px 4px;
            margin: -2px -4px;
            transition: background-color 0.2s ease;
        }
        
        .sort-icon {
            transition: all 0.2s ease;
        }
        
        .sortable:hover .sort-icon {
            opacity: 0.8 !important;
        }
    </style>
    
    <script>
        $(document).ready(function() {
            // Constants
            const USER_ROLES = {
                ADMIN: 1,
                USER: 2
            };

            const ROLE_NAMES = {
                1: 'Admin',
                2: 'User'
            };

            let currentPage = 1;
            let pageSize = 10;
            let currentFilters = {};
            let currentUserId = null;
            let users = [];
            let currentSort = { field: 'username', direction: 'asc' };

            // Initialize the page
            initializePage();

            function initializePage() {
                loadUsers();
                setupEventHandlers();
                setupSortableHeaders();
            }

            function setupEventHandlers() {
                // Search functionality
                $('#searchInput').on('input', debounce(function() {
                    const searchValue = $('#searchInput').val() || '';
                    currentFilters.search = searchValue;
                    currentPage = 1;
                    loadUsers();
                }, 500));

                // Filter handlers
                $('#roleFilter, #dateFromFilter, #dateToFilter').on('change', function() {
                    currentFilters.roleId = $('#roleFilter').val() || null;
                    currentFilters.dateFrom = $('#dateFromFilter').val() || null;
                    currentFilters.dateTo = $('#dateToFilter').val() || null;
                    currentPage = 1;
                    loadUsers();
                });

                // Clear filters
                $('#clearFilters').on('click', function() {
                    $('#searchInput, #roleFilter, #dateFromFilter, #dateToFilter').val('');
                    currentFilters = {};
                    currentPage = 1;
                    loadUsers();
                });

                // Create user
                $('#saveUserBtn').on('click', function() {
                    createUser();
                });

                // Update user
                $('#saveUpdateBtn').on('click', function() {
                    updateUser();
                });

                // Change password
                $('#savePasswordBtn').on('click', function() {
                    changePassword();
                });

                // Confirmation modal
                $('#confirmActionBtn').on('click', function() {
                    if (window.pendingAction) {
                        window.pendingAction();
                        window.pendingAction = null;
                    }
                    $('#confirmModal').modal('hide');
                });
            }

            function setupSortableHeaders() {
                $('.sortable').on('click', function() {
                    const field = $(this).data('sort');
                    const icon = $(this).find('.sort-icon');
                    
                    // Reset all icons to default state
                    $('.sort-icon').removeClass('ti-chevron-up ti-chevron-down').addClass('ti-chevron-up').css({
                        'opacity': '0.6',
                        'color': '#6c757d'
                    });
                    
                    // Update current sort
                    if (currentSort.field === field) {
                        currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                    } else {
                        currentSort.field = field;
                        currentSort.direction = 'asc';
                    }
                    
                    // Update active icon with darker color
                    icon.removeClass('ti-chevron-up ti-chevron-down')
                        .addClass(currentSort.direction === 'asc' ? 'ti-chevron-up' : 'ti-chevron-down')
                        .css({
                            'opacity': '1',
                            'color': '#495057'
                        });
                    
                    // Apply sort
                    currentFilters.sortBy = currentSort.field;
                    currentFilters.sortOrder = currentSort.direction;
                    currentPage = 1;
                    loadUsers();
                });
                
                // Add cursor pointer to sortable headers
                $('.sortable').css('cursor', 'pointer');
            }

            function loadUsers() {
                const params = {
                    page: currentPage,
                    pageSize: pageSize,
                    ...currentFilters
                };

                $.ajax({
                    url: '/api/user/paged',
                    method: 'GET',
                    data: params,
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        displayUsers(response);
                        updatePagination(response);
                    },
                    error: function(xhr) {
                        showAlert('Error loading users', 'danger');
                    }
                });
            }

            function displayUsers(data) {
                const tbody = $('#usersTableBody');
                tbody.empty();

                // Store users data for later use
                users = data.items || [];

                if (data.items && data.items.length > 0) {
                    data.items.forEach((user, index) => {
                        const row = createUserRow(user, index);
                        tbody.append(row);
                    });
                } else {
                    tbody.append(`
                        <tr>
                            <td colspan="7" class="text-center py-4">
                                <i class="ti ti-inbox fs-1 text-muted"></i>
                                <h4 class="mt-3">No Users Found</h4>
                                <p class="text-muted">There are no users to display.</p>
                            </td>
                        </tr>
                    `);
                }
            }

            function createUserRow(user, index) {
                const roleBadge = getRoleBadge(user.roles[0]);
                const formattedCreatedDate = formatDateOnly(user.createdTime);
                const sequentialNumber = (currentPage - 1) * pageSize + index + 1;

                return `
                    <tr>
                        <td class="px-0">${sequentialNumber}</td>
                        <td class="px-0">
                            <div>
                                <h6 class="mb-0">${user.username}</h6>
                                <small class="text-muted">${user.name}</small>
                            </div>
                        </td>
                        <td class="px-0">${user.email || 'No email'}</td>
                        <td class="px-0">${user.phone || 'No phone'}</td>
                        <td class="px-0">${roleBadge}</td>
                        <td class="px-0">${formattedCreatedDate}</td>
                        <td class="px-0 text-end">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-outline-primary" onclick="viewUser(${user.userId})" title="View Details">
                                    <i class="ti ti-eye"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-warning" onclick="editUser(${user.userId})" title="Edit User">
                                    <i class="ti ti-edit"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-info" onclick="changeUserPassword(${user.userId})" title="Change Password">
                                    <i class="ti ti-key"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteUser(${user.userId})" title="Delete User">
                                    <i class="ti ti-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }

            function getRoleBadge(roleName) {
                const roleClasses = {
                    'Admin': 'badge bg-warning',
                    'User': 'badge bg-info'
                };
                const className = roleClasses[roleName] || 'badge bg-secondary';
                return `<span class="${className}">${roleName}</span>`;
            }

            function updatePagination(data) {
                const pagination = $('#pagination');
                pagination.empty();

                if (data.totalPages <= 1) return;

                // Previous button
                const prevDisabled = currentPage === 1 ? 'disabled' : '';
                pagination.append(`
                    <li class="page-item ${prevDisabled}">
                        <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">Previous</a>
                    </li>
                `);

                // Page numbers
                const startPage = Math.max(1, currentPage - 2);
                const endPage = Math.min(data.totalPages, currentPage + 2);

                for (let i = startPage; i <= endPage; i++) {
                    const activeClass = i === currentPage ? 'active' : '';
                    pagination.append(`
                        <li class="page-item ${activeClass}">
                            <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
                        </li>
                    `);
                }

                // Next button
                const nextDisabled = currentPage === data.totalPages ? 'disabled' : '';
                pagination.append(`
                    <li class="page-item ${nextDisabled}">
                        <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">Next</a>
                    </li>
                `);
            }

            function createUser() {
                const formData = {
                    username: $('#createUsername').val(),
                    fullName: $('#createFullName').val(),
                    password: $('#createPassword').val(),
                    email: $('#createEmail').val(),
                    phone: $('#createPhone').val(),
                    roleId: parseInt($('#createRoleId').val()),
                    photo: $('#createPhoto').val()
                };

                // Validation
                if (!formData.username || !formData.fullName || !formData.password) {
                    showAlert('Please fill in all required fields', 'warning');
                    return;
                }

                $.ajax({
                    url: '/api/user',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        if (response.success) {
                            showAlert('User created successfully', 'success');
                            $('#createUserModal').modal('hide');
                            $('#createUserForm')[0].reset();
                            loadUsers();
                        } else {
                            showAlert(response.message || 'Error creating user', 'danger');
                        }
                    },
                    error: function(xhr) {
                        const errorMessage = xhr.responseJSON?.message || 'Error creating user';
                        showAlert(errorMessage, 'danger');
                    }
                });
            }

            function updateUser() {
                const userId = $('#updateUserId').val();
                const formData = {
                    fullName: $('#updateFullName').val(),
                    email: $('#updateEmail').val(),
                    phone: $('#updatePhone').val(),
                    roleId: parseInt($('#updateRoleId').val()),
                    photo: $('#updatePhoto').val()
                };

                // Validation
                if (!formData.fullName) {
                    showAlert('Please fill in all required fields', 'warning');
                    return;
                }

                $.ajax({
                    url: `/api/user/${userId}`,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        if (response.success) {
                            showAlert('User updated successfully', 'success');
                            $('#updateUserModal').modal('hide');
                            loadUsers();
                        } else {
                            showAlert(response.message || 'Error updating user', 'danger');
                        }
                    },
                    error: function(xhr) {
                        const errorMessage = xhr.responseJSON?.message || 'Error updating user';
                        showAlert(errorMessage, 'danger');
                    }
                });
            }

            function changePassword() {
                const userId = $('#changePasswordUserId').val();
                const newPassword = $('#newPassword').val();
                const confirmPassword = $('#confirmPassword').val();

                // Validation
                if (!newPassword || !confirmPassword) {
                    showAlert('Please fill in all password fields', 'warning');
                    return;
                }

                if (newPassword !== confirmPassword) {
                    showAlert('New password and confirm password do not match', 'warning');
                    return;
                }

                const formData = {
                    newPassword: newPassword,
                    confirmPassword: confirmPassword
                };

                $.ajax({
                    url: `/api/user/${userId}/password-reset`,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        if (response.success) {
                            showAlert('Password reset successfully', 'success');
                            $('#changePasswordModal').modal('hide');
                            $('#changePasswordForm')[0].reset();
                        } else {
                            showAlert(response.message || 'Error resetting password', 'danger');
                        }
                    },
                    error: function(xhr) {
                        const errorMessage = xhr.responseJSON?.message || 'Error resetting password';
                        showAlert(errorMessage, 'danger');
                    }
                });
            }

            // Global functions for onclick handlers
            window.viewUser = function(userId) {
                $.ajax({
                    url: `/api/user/${userId}`,
                    method: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + getAuthToken()
                    },
                    success: function(response) {
                        if (response.success) {
                            displayUserDetails(response.data);
                            $('#viewUserModal').modal('show');
                        }
                    },
                    error: function(xhr) {
                        showAlert('Error loading user details', 'danger');
                    }
                });
            };

            window.editUser = function(userId) {
                currentUserId = userId;
                $('#updateUserId').val(userId);
                
                // Find the user and populate form
                const user = users.find(u => u.userId === userId);
                if (user) {
                    $('#updateUsername').val(user.username);
                    $('#updateFullName').val(user.name);
                    $('#updateEmail').val(user.email || '');
                    $('#updatePhone').val(user.phone || '');
                    $('#updatePhoto').val(user.photo || '');
                    
                    // Set role based on roles array
                    const roleId = user.roles.includes('Admin') ? 1 : 2;
                    $('#updateRoleId').val(roleId);
                }
                
                $('#updateUserModal').modal('show');
            };

            window.changeUserPassword = function(userId) {
                $('#changePasswordUserId').val(userId);
                $('#changePasswordModal').modal('show');
            };

            window.deleteUser = function(userId) {
                const user = users.find(u => u.userId === userId);
                if (user) {
                    $('#confirmMessage').text(`Are you sure you want to delete user "${user.username}"? This action cannot be undone.`);
                    window.pendingAction = function() {
                        $.ajax({
                            url: `/api/user/${userId}`,
                            method: 'DELETE',
                            headers: {
                                'Authorization': 'Bearer ' + getAuthToken()
                            },
                            success: function(response) {
                                if (response.success) {
                                    showAlert('User deleted successfully', 'success');
                                    loadUsers();
                                } else {
                                    showAlert(response.message || 'Error deleting user', 'danger');
                                }
                            },
                            error: function(xhr) {
                                const errorMessage = xhr.responseJSON?.message || 'Error deleting user';
                                showAlert(errorMessage, 'danger');
                            }
                        });
                    };
                    $('#confirmModal').modal('show');
                }
            };

            window.changePage = function(page) {
                currentPage = page;
                loadUsers();
            };

            function displayUserDetails(user) {
                const detailsHtml = `
                    <div class="row">
                        <div class="col-md-6">
                            <h6>User Information</h6>
                            <table class="table table-sm">
                                <tr><td><strong>Username:</strong></td><td>${user.username}</td></tr>
                                <tr><td><strong>Full Name:</strong></td><td>${user.name}</td></tr>
                                <tr><td><strong>Email:</strong></td><td>${user.email || 'Not provided'}</td></tr>
                                <tr><td><strong>Phone:</strong></td><td>${user.phone || 'Not provided'}</td></tr>
                                <tr><td><strong>Role:</strong></td><td>${getRoleBadge(user.roles[0])}</td></tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6>Account Details</h6>
                            <table class="table table-sm">
                                <tr><td><strong>Created:</strong></td><td>${formatDate(user.createdTime)}</td></tr>
                                <tr><td><strong>Last Updated:</strong></td><td>${formatDate(user.updatedTime)}</td></tr>
                                <tr><td><strong>Updated By:</strong></td><td>${user.updatedBy || 'System'}</td></tr>
                            </table>
                        </div>
                    </div>
                `;
                $('#userDetails').html(detailsHtml);
            }

            function formatDate(dateString) {
                if (!dateString) return 'N/A';
                const date = new Date(dateString);
                return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
            }

            function formatDateOnly(dateString) {
                if (!dateString) return 'N/A';
                const date = new Date(dateString);
                return date.toLocaleDateString();
            }

            function showAlert(message, type) {
                const alertHtml = `
                    <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                        <i class="ti ti-${type === 'success' ? 'check-circle' : type === 'danger' ? 'alert-circle' : 'info-circle'} me-2"></i>
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `;
                
                // Remove existing alerts
                $('.alert').remove();
                
                // Add new alert at the top of the page
                $('.card-body').prepend(alertHtml);
                
                // Auto-hide after 5 seconds
                setTimeout(function() {
                    $('.alert').fadeOut();
                }, 5000);
            }

            function getAuthToken() {
                // Get token from localStorage or cookie
                return localStorage.getItem('authToken') || getCookie('authToken');
            }

            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
                return null;
            }

            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }
        });
    </script>
}
